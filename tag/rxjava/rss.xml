<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>okmanideep.github.io/</title>
   
   <link>https://okmanideep.github.io</link>
   <description>Android · Development · Design</description>
   <language>en-uk</language>
   <managingEditor> Manideep Polireddi</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>RxConfusions - Part 1 : Map and FlatMap</title>
	  <link>/RxConfusions-1-Map-and-FlatMap</link>
	  <author>Manideep Polireddi</author>
	  <pubDate>2015-12-02T01:40:00+05:30</pubDate>
	  <guid>/RxConfusions-1-Map-and-FlatMap</guid>
	  <description><![CDATA[
	     <p>If you don&#39;t know what RxJava is or you aren&#39;t comfortable with the terms <code>Observable</code>, <code>Observer</code>, <code>Operator</code> and <code>Subscriber</code>, I suggest you have a look at <a href="http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/">Grokking RxJava</a> series by <a href="https://twitter.com/danlew42">Dan Lew</a>. </p>

<p>If you have surfed through some RxJava content on the web, you should have come accross the <code>map()</code> operator. It is exactly what you think it is. But you might have seen people using the <code>flatMap()</code> operator in similar senarios which might have confused you a bit. Let&#39;s use them both in a small example and observe the effects of these operators.</p>

<p>Let&#39;s use this simple <code>Observer</code> for logging</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span><a id="line-1" name="line-1"></a><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompleted</span><span class="p">()</span> <span class="p">{</span>
<a id="line-2" name="line-2"></a>    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;onCompleted&quot;</span><span class="p">);</span>
<a id="line-3" name="line-3"></a><span class="p">}</span>
<a id="line-4" name="line-4"></a>
<a id="line-5" name="line-5"></a><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="p">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
<a id="line-6" name="line-6"></a>    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">printf</span><span class="p">(</span><span class="s">&quot;onError: %s\n&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
<a id="line-7" name="line-7"></a><span class="p">}</span>
<a id="line-8" name="line-8"></a>
<a id="line-9" name="line-9"></a><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="p">(</span><span class="n">String</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
<a id="line-10" name="line-10"></a>    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">printf</span><span class="p">(</span><span class="s">&quot;onNext: %s\n&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
<a id="line-11" name="line-11"></a><span class="p">}</span>
</code></pre></div>
<h4>Simple use of map operator</h4>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span><a id="line-1" name="line-1"></a><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
<a id="line-2" name="line-2"></a>    <span class="n">Printer</span> <span class="n">printer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Printer</span><span class="p">();</span>
<a id="line-3" name="line-3"></a>    <span class="n">String</span><span class="o">[]</span> <span class="n">names</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="p">{</span><span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="s">&quot;Samuel&quot;</span><span class="p">,</span> <span class="s">&quot;Micheal&quot;</span><span class="p">,</span> <span class="s">&quot;Tom&quot;</span><span class="p">};</span>
<a id="line-4" name="line-4"></a>    <span class="n">printer</span><span class="p">.</span><span class="na">printTitlesUsingMap</span><span class="p">(</span><span class="n">names</span><span class="p">);</span>
<a id="line-5" name="line-5"></a><span class="p">}</span>
<a id="line-6" name="line-6"></a>
<a id="line-7" name="line-7"></a><span class="kd">private</span> <span class="kt">void</span> <span class="nf">printTitlesUsingMap</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">names</span><span class="p">)</span> <span class="p">{</span>
<a id="line-8" name="line-8"></a>    <span class="n">Observable</span><span class="p">.</span><span class="na">from</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
<a id="line-9" name="line-9"></a>            <span class="p">.</span><span class="na">map</span><span class="p">(</span><span class="n">Printer</span><span class="p">::</span><span class="n">getTitle</span><span class="p">)</span>
<a id="line-10" name="line-10"></a>            <span class="p">.</span><span class="na">subscribe</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
<a id="line-11" name="line-11"></a><span class="p">}</span>
<a id="line-12" name="line-12"></a>
<a id="line-13" name="line-13"></a><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="p">(</span><span class="n">String</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
<a id="line-14" name="line-14"></a>    <span class="k">return</span> <span class="n">String</span><span class="p">.</span><span class="na">format</span><span class="p">(</span><span class="s">&quot;%s - %d&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">.</span><span class="na">length</span><span class="p">());</span>
<a id="line-15" name="line-15"></a><span class="p">}</span>
</code></pre></div>
<p>Output :</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>onNext: John - 4
<a id="line-2" name="line-2"></a>onNext: Micheal - 7
<a id="line-3" name="line-3"></a>onNext: Tom - 3
<a id="line-4" name="line-4"></a>onNext: Samuel - 6
<a id="line-5" name="line-5"></a>onCompleted
</code></pre></div>
<p>Lets make it a little interesting</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="p">(</span><span class="n">String</span> <span class="n">name</span><span class="p">)</span> <span class="kd">throws</span> <span class="n">IllegalArgumentException</span><span class="p">{</span>
<span class="hll">      <span class="k">if</span><span class="p">(</span><span class="s">&quot;Micheal&quot;</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">name</span><span class="p">))</span> <span class="p">{</span>
</span><span class="hll">          <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">&quot;Too many Micheals&quot;</span><span class="p">);</span>
</span><span class="hll">      <span class="p">}</span>
</span>      <span class="k">return</span> <span class="n">String</span><span class="p">.</span><span class="na">format</span><span class="p">(</span><span class="s">&quot;%s - %d&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">.</span><span class="na">length</span><span class="p">());</span>
  <span class="p">}</span>
</code></pre></div>
<p>Output :</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>onNext: John - 4
<a id="line-2" name="line-2"></a>onNext: Samuel - 6
<a id="line-3" name="line-3"></a>onError: java.lang.IllegalArgumentException: Too many Micheals
</code></pre></div>
<p>Even though there are too many Micheals, you don&#39;t want to stop printing once a Micheal arrives. You might be thinking lets use <code>filter()</code> to filter out <code>Micheal</code> but let us assume the printer doesn&#39;t know when <code>getTitle()</code> fails. Operators like <code>map()</code> can&#39;t change the flow items, they just modify the items which are emitted. This is when operators like <code>flatMap()</code> come in handly</p>

<h4>Enter the FlatMap</h4>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">printTitlesUsingFlatMap</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">names</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">Observable</span><span class="p">.</span><span class="na">from</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
              <span class="p">.</span><span class="na">flatMap</span><span class="p">(</span><span class="n">Printer</span><span class="p">::</span><span class="n">getTitleObservable</span><span class="p">)</span>
              <span class="p">.</span><span class="na">subscribe</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getTitleObservable</span><span class="p">(</span><span class="n">String</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="na">create</span><span class="p">(</span><span class="n">subscriber</span> <span class="o">-&gt;</span> <span class="p">{</span>
          <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">subscriber</span><span class="p">.</span><span class="na">isUnsubscribed</span><span class="p">())</span> <span class="p">{</span>
<span class="hll">              <span class="k">try</span> <span class="p">{</span>
</span><span class="hll">                  <span class="n">subscriber</span><span class="p">.</span><span class="na">onNext</span><span class="p">(</span><span class="n">getTitle</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
</span><span class="hll">              <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">IllegalArgumentException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="hll">                  <span class="c1">//do nothing</span>
</span><span class="hll">              <span class="p">}</span>
</span><span class="hll">              <span class="n">subscriber</span><span class="p">.</span><span class="na">onCompleted</span><span class="p">();</span>
</span>          <span class="p">}</span>
      <span class="p">});</span>
  <span class="p">}</span>
</code></pre></div>
<p>Notice that we are calling <code>subscriber.onComplete()</code> for every name. Guess the output... guessed it? Now have a look<br>
Output :</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>onNext: John - 4
<a id="line-2" name="line-2"></a>onNext: Samuel - 6
<a id="line-3" name="line-3"></a>onNext: Tom - 3
<a id="line-4" name="line-4"></a>onCompleted
</code></pre></div>
<p>Is that what you expected? Probably not. Now have a look at what happens if don&#39;t call <code>subscriber.onComplete()</code> when there is an exception.</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span>  <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="na">create</span><span class="p">(</span><span class="n">subscriber</span> <span class="o">-&gt;</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">subscriber</span><span class="p">.</span><span class="na">isUnsubscribed</span><span class="p">())</span> <span class="p">{</span>
          <span class="k">try</span> <span class="p">{</span>
              <span class="n">subscriber</span><span class="p">.</span><span class="na">onNext</span><span class="p">(</span><span class="n">getTitle</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
<span class="hll">              <span class="n">subscriber</span><span class="p">.</span><span class="na">onCompleted</span><span class="p">();</span>
</span>          <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">IllegalArgumentException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
              <span class="c1">//do nothing</span>
          <span class="p">}</span>
      <span class="p">}</span>
  <span class="p">});</span>
</code></pre></div>
<p>Make a guess before you look at the output.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>onNext: John - 4
<a id="line-2" name="line-2"></a>onNext: Samuel - 6
<a id="line-3" name="line-3"></a>onNext: Tom - 3
</code></pre></div>
<p>No <code>onComplete()</code> at all.<br>
Now make a guess who is the <code>subscriber</code> to our <code>getTitleObservable()</code> function.  </p>

<blockquote>
<p>The <code>flatMap()</code> operator is our subscriber  </p>
</blockquote>

<p>If you are thiking - &#39;Wait, <code>flatMap()</code> is an <em>Operator</em> not a <em>Subscriber</em>&#39;, you should watch <a href="https://vimeo.com/144812843">Demistifying RxJava Subscribers</a> by <a href="https://twitter.com/JakeWharton">Jake Wharton</a>. Basically, <strong>everything</strong> is a subscriber.</p>

<p><em>FlatMap</em> collects all the observables returned for each item in the stream and emits all the items emitted by those observables. Simply put, it is a <a href="https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L5204">merge of all observables returned by your mapping function</a>. 
It calls <code>onComplete()</code> only when all the observables are <em>completed</em>.  </p>

<p>In this example <code>getTitleObservale(&quot;Micheal&quot;)</code> wasn&#39;t completed. So <strong>FlatMap is waiting</strong> for it to complete(Yes, it is in the memory).</p>

<p>Visualise what happened in the above example. Now think about the <code>map()</code> operator. If you feel like - &#39;They are two very different operators&#39;, then I have done my job. If you don&#39;t, <a href="https://twitter.com/okmanideep">try confusing me as well</a>.</p>

<p>I am no expert in this topic. Just sharing as I learn. Please <a href="https://twitter.com/okmanideep">drop me a tweet</a> or a comment if I got anything wrong. And share it to people who you think will find this useful.</p>

<h3>EDIT</h3>

<p><a href="http://artemzin.com/blog/rxjava-defer-execution-of-function-via-fromcallable/">Artem Zinnatullin</a>&#39;s post suggests a better way to for our getTitleObservable().</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span><a id="line-1" name="line-1"></a><span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="na">fromCallable</span><span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">getTitle</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
</code></pre></div>
<p>By using this method, you don&#39;t need to worry about calling the right functions to the subscriber. Thanks to <a href="https://www.reddit.com/r/androiddev/comments/3u5w0c/if_you_are_writing_observablecreate_theres_a_big/">pakoito</a> for pointing that out.</p>

	  ]]></description>
	</item>


</channel>
</rss>
