<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>okmanideep.github.io/</title>
   
   <link>https://okmanideep.github.io</link>
   <description>Android · Development · Design</description>
   <language>en-uk</language>
   <managingEditor> Manideep Polireddi</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[Draft] Understanding Composition and Side Effects</title>
	  <link>/understanding-composition-and-side-effects</link>
	  <author>Manideep Polireddi</author>
	  <pubDate>2022-04-01T23:30:00+05:30</pubDate>
	  <guid>/understanding-composition-and-side-effects</guid>
	  <description><![CDATA[
	     <style>
.insight {
    background: #3B4354;
    border-radius: 3px;
    padding: 12px;
}
.insight > :first-child {
    margin-top: 0;
}
.insight > :last-child {
    margin-bottom: 0;
}
</style>

<p>Jetpack Compose is a <strong>Declarative UI Framework</strong> that allows us to define UI, state and side effects by declaring functions. A lot of them. Named and anonymous (lambdas). We will try and understand when does the framework invoke the functions we are declaring.</p>

<p>Some of those functions we <em>declare</em> are <a href="https://developer.android.com/jetpack/compose/side-effects">Side Effects</a>. Specifically we are going to look at <code>LaunchedEffect</code>, <code>SideEffect</code> and <code>DisposableEffect</code></p>

<p>They look like this in the code</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="n">LaunchedEffect</span><span class="p">(</span><span class="cm">/*key(s)*/</span><span class="p">)</span> <span class="p">{</span>
<a id="line-2" name="line-2"></a>    <span class="cm">/* effect that we are declaring as a lambda */</span>
<a id="line-3" name="line-3"></a><span class="p">}</span>
</code></pre></div>
<p>When the above code is run, <code>LaunchedEffect</code> <a href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#LaunchedEffect(kotlin.Any,kotlin.coroutines.SuspendFunction1)">the function</a> runs and registers the lambda we passed, to run it when it needs to be run. Well when exactly? We should get an idea very soon. </p>

<p>Let&#39;s dive in. </p>

<h2>🛠 Setup</h2>

<p>A <code>@Composable</code> which sets up a bunch of logs inside Side Effects - <code>DisposableEffect</code>, <code>SideEffect</code> and <code>LaunchedEffect</code></p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="nd">@Composable</span>
<a id="line-2" name="line-2"></a><span class="kd">fun</span> <span class="nf">Effects</span><span class="p">(</span>
<a id="line-3" name="line-3"></a>    <span class="n">logTag</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
<a id="line-4" name="line-4"></a>    <span class="n">key</span><span class="p">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="n">logTag</span><span class="p">,</span>
<a id="line-5" name="line-5"></a><span class="p">)</span> <span class="p">{</span>
<a id="line-6" name="line-6"></a>    <span class="kd">val</span> <span class="nv">tag</span> <span class="o">=</span> <span class="n">logTag</span><span class="p">.</span><span class="na">padEnd</span><span class="p">(</span><span class="m">25</span><span class="p">)</span>
<a id="line-7" name="line-7"></a>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">tag</span><span class="s"> - Registering Effects&quot;</span><span class="p">)</span>
<a id="line-8" name="line-8"></a>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
<a id="line-9" name="line-9"></a>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">tag</span><span class="s"> - LaunchedEffect&quot;</span><span class="p">)</span>
<a id="line-10" name="line-10"></a>    <span class="p">}</span>
<a id="line-11" name="line-11"></a>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
<a id="line-12" name="line-12"></a>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">tag</span><span class="s"> - DisposableEffect&quot;</span><span class="p">)</span>
<a id="line-13" name="line-13"></a>        <span class="n">onDispose</span> <span class="p">{</span>
<a id="line-14" name="line-14"></a>            <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">tag</span><span class="s"> - onDispose&quot;</span><span class="p">)</span>
<a id="line-15" name="line-15"></a>        <span class="p">}</span>
<a id="line-16" name="line-16"></a>    <span class="p">}</span>
<a id="line-17" name="line-17"></a>    <span class="n">SideEffect</span> <span class="p">{</span>
<a id="line-18" name="line-18"></a>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">tag</span><span class="s"> - SideEffect&quot;</span><span class="p">)</span>
<a id="line-19" name="line-19"></a>    <span class="p">}</span>
<a id="line-20" name="line-20"></a><span class="p">}</span>
</code></pre></div>
<p>And a <code>TrafficLight</code> that shows an emoji in <code>Text</code>. Also uses the <code>Effects</code> we defined above for logging</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="nd">@Composable</span>
<a id="line-2" name="line-2"></a><span class="kd">fun</span> <span class="nf">TrafficLight</span><span class="p">(</span>
<a id="line-3" name="line-3"></a>    <span class="n">lightEmoji</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
<a id="line-4" name="line-4"></a>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
<a id="line-5" name="line-5"></a><span class="p">)</span> <span class="p">{</span>
<a id="line-6" name="line-6"></a>    <span class="n">Text</span><span class="p">(</span><span class="n">lightEmoji</span><span class="p">,</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="m">120.</span><span class="n">sp</span><span class="p">,</span> <span class="n">modifier</span> <span class="o">=</span> <span class="n">modifier</span><span class="p">)</span>
<a id="line-7" name="line-7"></a>
<a id="line-8" name="line-8"></a>    <span class="n">Effects</span><span class="p">(</span><span class="s">&quot;TrafficLight(</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s">)&quot;</span><span class="p">)</span>
<a id="line-9" name="line-9"></a><span class="p">}</span>
</code></pre></div>
<h2>Touch And Go</h2>

<p>We are going to start by adding and removing this <code>TrafficLight</code> on touch as shown below</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="nd">@Composable</span>
<a id="line-2" name="line-2"></a><span class="kd">fun</span> <span class="nf">TouchAndGo</span><span class="p">()</span> <span class="p">{</span>
<a id="line-3" name="line-3"></a>    <span class="kd">var</span> <span class="nv">isVisible</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="p">}</span>
<a id="line-4" name="line-4"></a>    <span class="n">Box</span><span class="p">(</span>
<a id="line-5" name="line-5"></a>        <span class="n">contentAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">Center</span><span class="p">,</span>
<a id="line-6" name="line-6"></a>        <span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
<a id="line-7" name="line-7"></a>            <span class="p">.</span><span class="na">fillMaxSize</span><span class="p">()</span>
<a id="line-8" name="line-8"></a>            <span class="p">.</span><span class="na">clickable</span> <span class="p">{</span>
<a id="line-9" name="line-9"></a>                <span class="n">log</span><span class="p">(</span><span class="s">&quot;---Click---------------------&quot;</span><span class="p">)</span>
<a id="line-10" name="line-10"></a>                <span class="n">isVisible</span> <span class="o">=</span> <span class="o">!</span><span class="n">isVisible</span>
<a id="line-11" name="line-11"></a>            <span class="p">},</span>
<a id="line-12" name="line-12"></a>    <span class="p">)</span> <span class="p">{</span>
<a id="line-13" name="line-13"></a>        <span class="k">if</span> <span class="p">(</span><span class="n">isVisible</span><span class="p">)</span> <span class="p">{</span>
<a id="line-14" name="line-14"></a>            <span class="n">TrafficLight</span><span class="p">(</span><span class="n">lightEmoji</span> <span class="o">=</span> <span class="s">&quot;🟢&quot;</span><span class="p">)</span>
<a id="line-15" name="line-15"></a>        <span class="p">}</span>
<a id="line-16" name="line-16"></a>    <span class="p">}</span>
<a id="line-17" name="line-17"></a><span class="p">}</span>
</code></pre></div>
<p>Initially we show nothing. On click, we show the green light 🟢.</p>

<video width="320" height="320" autoplay muted loop>
  <source src="https://i.imgur.com/TCy72F9.mp4" type="video/mp4">
</video>

<p>So these are the logs</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>---Click---------------------
<a id="line-2" name="line-2"></a>TrafficLight(🟢)     - Registering Effects
<a id="line-3" name="line-3"></a>TrafficLight(🟢)     - DisposableEffect
<a id="line-4" name="line-4"></a>TrafficLight(🟢)     - SideEffect
<a id="line-5" name="line-5"></a>TrafficLight(🟢)     - LaunchedEffect
<a id="line-6" name="line-6"></a>---Click---------------------
<a id="line-7" name="line-7"></a>TrafficLight(🟢)     - onDispose
</code></pre></div>
<div class="insight">
<h3>✨ Insights</h3>

<p>When a <code>Composable</code> enters composition:</p>

<ul>
<li>Our <code>@Composable</code> function runs first</li>
<li>Then the <code>DisposableEffect</code>, the <code>SideEffect</code> and the <code>LaunchedEffect</code> in that order</li>
</ul>

<p>When a <code>Composable</code> exits composition:</p>

<ul>
<li>The <code>onDispose</code> of the corresponding <code>DisposableEffect</code> runs</li>
</ul>
</div>

<p>Let&#39;s make it slightly more interesting. Let&#39;s add <code>Effects</code> above and below the <code>TrafficLight</code></p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="nd">@Composable</span>
<span class="kd">fun</span> <span class="nf">TouchAndGo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">isVisible</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">Box</span><span class="p">(</span>
        <span class="cm">/*...*/</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">isVisible</span><span class="p">)</span> <span class="p">{</span>
<span class="hll">            <span class="n">Effects</span><span class="p">(</span><span class="s">&quot;Pre - TrafficLight(🟢)&quot;</span><span class="p">)</span>
</span>            <span class="n">TrafficLight</span><span class="p">(</span><span class="n">lightEmoji</span> <span class="o">=</span> <span class="s">&quot;🟢&quot;</span><span class="p">)</span>
<span class="hll">            <span class="n">Effects</span><span class="p">(</span><span class="s">&quot;Post - TrafficLight(🟢)&quot;</span><span class="p">)</span>
</span>        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>So what do we have on the logs now?</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>---Click---------------------
<a id="line-2" name="line-2"></a>Pre - TrafficLight(🟢)    - Registering Effects
<a id="line-3" name="line-3"></a>TrafficLight(🟢)          - Registering Effects
<a id="line-4" name="line-4"></a>Post - TrafficLight(🟢)   - Registering Effects
<a id="line-5" name="line-5"></a>Pre - TrafficLight(🟢)    - DisposableEffect
<a id="line-6" name="line-6"></a>TrafficLight(🟢)          - DisposableEffect
<a id="line-7" name="line-7"></a>Post - TrafficLight(🟢)   - DisposableEffect
<a id="line-8" name="line-8"></a>Pre - TrafficLight(🟢)    - SideEffect
<a id="line-9" name="line-9"></a>TrafficLight(🟢)          - SideEffect
<a id="line-10" name="line-10"></a>Post - TrafficLight(🟢)   - SideEffect
<a id="line-11" name="line-11"></a>Pre - TrafficLight(🟢)    - LaunchedEffect
<a id="line-12" name="line-12"></a>TrafficLight(🟢)          - LaunchedEffect
<a id="line-13" name="line-13"></a>Post - TrafficLight(🟢)   - LaunchedEffect
<a id="line-14" name="line-14"></a>---Click---------------------
<a id="line-15" name="line-15"></a>Post - TrafficLight(🟢)   - onDispose
<a id="line-16" name="line-16"></a>TrafficLight(🟢)          - onDispose
<a id="line-17" name="line-17"></a>Pre - TrafficLight(🟢)    - onDispose
</code></pre></div>
<div class="insight">
<h3>✨ Insights</h3>

<p>On Entering Composition: </p>
<ul>
    <li>All the Side Effects run in the order they are declared / registered</li>
    <li>Among the different Side Effects - <code>DisposableEffect</code>s run first, followed by <code>SideEffect</code>s, followed by <code>LaunchedEffect</code></li>
</ul>

<p>On Exiting Composition: </p>
<ul>
    <li><code>DisposableEffect</code>s are <i>disposed</i> in the <b>reverse</b> order they are declared / registered. <b>L</b>ast <b>I</b>n <b>F</b>irst <b>O</b>ut - LIFO. Like a stack!</li>
</ul>

</div>

<hr>

<h2>Stop And Go</h2>

<p>Toggle between 🟢 and 🔴 on click</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="nd">@Composable</span>
<a id="line-2" name="line-2"></a><span class="kd">fun</span> <span class="nf">StopAndGo</span><span class="p">()</span> <span class="p">{</span>
<a id="line-3" name="line-3"></a>    <span class="kd">var</span> <span class="nv">go</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">}</span>
<a id="line-4" name="line-4"></a>
<a id="line-5" name="line-5"></a>    <span class="n">Box</span><span class="p">(</span>
<a id="line-6" name="line-6"></a>        <span class="n">contentAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">Center</span><span class="p">,</span>
<a id="line-7" name="line-7"></a>        <span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
<a id="line-8" name="line-8"></a>            <span class="p">.</span><span class="na">fillMaxSize</span><span class="p">()</span>
<a id="line-9" name="line-9"></a>            <span class="p">.</span><span class="na">clickable</span> <span class="p">{</span>
<a id="line-10" name="line-10"></a>                <span class="n">log</span><span class="p">(</span><span class="s">&quot;---Click---------------------&quot;</span><span class="p">)</span>
<a id="line-11" name="line-11"></a>                <span class="n">go</span> <span class="o">=</span> <span class="o">!</span><span class="n">go</span>
<a id="line-12" name="line-12"></a>            <span class="p">},</span>
<a id="line-13" name="line-13"></a>    <span class="p">)</span> <span class="p">{</span>
<a id="line-14" name="line-14"></a>        <span class="kd">val</span> <span class="nv">light</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">go</span><span class="p">)</span> <span class="s">&quot;🟢&quot;</span> <span class="k">else</span> <span class="s">&quot;🔴&quot;</span>
<a id="line-15" name="line-15"></a>        <span class="n">TrafficLight</span><span class="p">(</span><span class="n">lightEmoji</span> <span class="o">=</span> <span class="n">light</span><span class="p">)</span>
<a id="line-16" name="line-16"></a>    <span class="p">}</span>
<a id="line-17" name="line-17"></a><span class="p">}</span>
</code></pre></div>
<video width="320" height="320" autoplay muted loop>
  <source src="https://i.imgur.com/pJWzmgh.mp4" type="video/mp4">
</video>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>TrafficLight(🟢)     - Registering Effects
<a id="line-2" name="line-2"></a>TrafficLight(🟢)     - DisposableEffect
<a id="line-3" name="line-3"></a>TrafficLight(🟢)     - SideEffect
<a id="line-4" name="line-4"></a>TrafficLight(🟢)     - LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>TrafficLight(🔴)     - Registering Effects
<a id="line-7" name="line-7"></a>TrafficLight(🟢)     - onDispose
<a id="line-8" name="line-8"></a>TrafficLight(🔴)     - DisposableEffect
<a id="line-9" name="line-9"></a>TrafficLight(🔴)     - SideEffect
<a id="line-10" name="line-10"></a>TrafficLight(🔴)     - LaunchedEffect
</code></pre></div>
<div class="insight">
<h3>✨ Insights</h3>
<ul>
<li>Incoming <code>DisposableEffect</code>s are <b>registered before</b> the outgoing <code>DisposableEffect</code>s are <b>disposed</b></li>
<li>Incoming <code>DisposableEffect</code>s are <b>run after</b> the outgoing <code>DisposableEffect</code>s are <b>disposed</b></li>
</ul>

</div>

<p>One might have expected this, because compose runtime figures out what are <em>incoming</em> and what are <em>outgoing</em> only after it runs / re-runs our <code>Composable</code> functions based on the new <code>State</code>.</p>

<p>Nevertheless, this is an important aspect to keep in mind. Since this makes it safe for two <code>Composable</code>s that are never in composition together, to <code>acquire</code>/<code>release</code> to the same resource in their <code>DisposableEffect</code>s.</p>

<h2>Stop Fade Go</h2>

<p>More often than not, we animate our changes. Let&#39;s look at the order of execution when we add animation to the above example</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="nd">@Composable</span>
<span class="kd">fun</span> <span class="nf">StopFadeGo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">go</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">Box</span><span class="p">(</span>
        <span class="n">contentAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">Center</span><span class="p">,</span>
        <span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
            <span class="p">.</span><span class="na">fillMaxSize</span><span class="p">()</span>
            <span class="p">.</span><span class="na">clickable</span> <span class="p">{</span>
                <span class="n">log</span><span class="p">(</span><span class="s">&quot;---Click---------------------&quot;</span><span class="p">)</span>
                <span class="n">go</span> <span class="o">=</span> <span class="o">!</span><span class="n">go</span>
            <span class="p">},</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="nv">light</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">go</span><span class="p">)</span> <span class="s">&quot;🟢&quot;</span> <span class="k">else</span> <span class="s">&quot;🔴&quot;</span>
<span class="hll">        <span class="n">Crossfade</span><span class="p">(</span><span class="n">targetState</span> <span class="o">=</span> <span class="n">light</span><span class="p">)</span> <span class="p">{</span>
</span><span class="hll">            <span class="n">TrafficLight</span><span class="p">(</span><span class="n">lightEmoji</span> <span class="o">=</span> <span class="nb">it</span><span class="p">)</span>
</span><span class="hll">        <span class="p">}</span>
</span>    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>TrafficLight(🟢)     - Registering Effects
<a id="line-2" name="line-2"></a>TrafficLight(🟢)     - DisposableEffect
<a id="line-3" name="line-3"></a>TrafficLight(🟢)     - SideEffect
<a id="line-4" name="line-4"></a>TrafficLight(🟢)     - LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>TrafficLight(🔴)     - Registering Effects
<a id="line-7" name="line-7"></a>TrafficLight(🔴)     - DisposableEffect
<a id="line-8" name="line-8"></a>TrafficLight(🔴)     - SideEffect
<a id="line-9" name="line-9"></a>TrafficLight(🔴)     - LaunchedEffect
<a id="line-10" name="line-10"></a>TrafficLight(🟢)     - onDispose
</code></pre></div>
<div class="insight">
<h3>✨ Insights</h3>

<p>When animated, the outgoing <code>DisposableEffect</code>s are disposed only after the animation is complete</p>
</div>

<p>Might feel obvious in hindsight. But it is important to keep in mind that since the <em>incoming</em> <code>DisposableEffect</code> runs before the <em>outgoing</em> disposes. This basically doesn&#39;t allow those <code>Composable</code>s to acquire/attach-to the same resource.</p>

<hr>

<h2>Ready Set Go</h2>

<p>🔴 Ready -&gt; 🔴 Set -&gt; 🟢 Go on click</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="nd">@Composable</span>
<a id="line-2" name="line-2"></a><span class="kd">fun</span> <span class="nf">ReadySetGo</span><span class="p">()</span> <span class="p">{</span>
<a id="line-3" name="line-3"></a>    <span class="kd">var</span> <span class="nv">count</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">}</span>
<a id="line-4" name="line-4"></a>
<a id="line-5" name="line-5"></a>    <span class="n">Box</span><span class="p">(</span>
<a id="line-6" name="line-6"></a>        <span class="n">contentAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">Center</span><span class="p">,</span>
<a id="line-7" name="line-7"></a>        <span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
<a id="line-8" name="line-8"></a>            <span class="p">.</span><span class="na">fillMaxSize</span><span class="p">()</span>
<a id="line-9" name="line-9"></a>            <span class="p">.</span><span class="na">clickable</span> <span class="p">{</span>
<a id="line-10" name="line-10"></a>                <span class="n">log</span><span class="p">(</span><span class="s">&quot;---Click---------------------&quot;</span><span class="p">)</span>
<a id="line-11" name="line-11"></a>                <span class="n">count</span><span class="o">++</span>
<a id="line-12" name="line-12"></a>            <span class="p">},</span>
<a id="line-13" name="line-13"></a>    <span class="p">)</span> <span class="p">{</span>
<a id="line-14" name="line-14"></a>        <span class="kd">val</span> <span class="nv">step</span> <span class="o">=</span> <span class="n">count</span> <span class="o">%</span> <span class="m">3</span>
<a id="line-15" name="line-15"></a>        <span class="kd">val</span> <span class="nv">light</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">step</span> <span class="o">==</span> <span class="m">0</span><span class="p">)</span> <span class="s">&quot;🟢&quot;</span> <span class="k">else</span> <span class="s">&quot;🔴&quot;</span>
<a id="line-16" name="line-16"></a>        <span class="kd">val</span> <span class="nv">message</span> <span class="o">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">step</span><span class="p">)</span> <span class="p">{</span>
<a id="line-17" name="line-17"></a>            <span class="m">1</span> <span class="o">-&gt;</span> <span class="s">&quot;Ready&quot;</span>
<a id="line-18" name="line-18"></a>            <span class="m">2</span> <span class="o">-&gt;</span> <span class="s">&quot;Set&quot;</span>
<a id="line-19" name="line-19"></a>            <span class="m">0</span> <span class="o">-&gt;</span> <span class="s">&quot;GO!&quot;</span>
<a id="line-20" name="line-20"></a>            <span class="k">else</span> <span class="o">-&gt;</span> <span class="s">&quot;Uh Oh!&quot;</span>
<a id="line-21" name="line-21"></a>        <span class="p">}</span>
<a id="line-22" name="line-22"></a>        <span class="n">Column</span><span class="p">(</span><span class="n">horizontalAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">CenterHorizontally</span><span class="p">)</span> <span class="p">{</span>
<a id="line-23" name="line-23"></a>            <span class="n">TrafficLight</span><span class="p">(</span><span class="n">lightEmoji</span> <span class="o">=</span> <span class="n">light</span><span class="p">)</span>
<a id="line-24" name="line-24"></a>            <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="na">height</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
<a id="line-25" name="line-25"></a>            <span class="n">Text</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="m">36.</span><span class="n">sp</span><span class="p">)</span>
<a id="line-26" name="line-26"></a>        <span class="p">}</span>
<a id="line-27" name="line-27"></a>    <span class="p">}</span>
<a id="line-28" name="line-28"></a><span class="p">}</span>
</code></pre></div>
<video width="320" height="320" autoplay muted loop>
  <source src="https://i.imgur.com/dEqERF5.mp4" type="video/mp4">
</video>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>TrafficLight(🔴)     - Registering Effects
<a id="line-2" name="line-2"></a>TrafficLight(🔴)     - DisposableEffect
<a id="line-3" name="line-3"></a>TrafficLight(🔴)     - SideEffect
<a id="line-4" name="line-4"></a>TrafficLight(🔴)     - LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>---Click---------------------
<a id="line-7" name="line-7"></a>TrafficLight(🟢)     - Registering Effects
<a id="line-8" name="line-8"></a>TrafficLight(🔴)     - onDispose
<a id="line-9" name="line-9"></a>TrafficLight(🟢)     - DisposableEffect
<a id="line-10" name="line-10"></a>TrafficLight(🟢)     - SideEffect
<a id="line-11" name="line-11"></a>TrafficLight(🟢)     - LaunchedEffect
</code></pre></div>
<blockquote>
<p>Note that for both &quot;Ready&quot; and &quot;Set&quot; states, the light is 🔴</p>
</blockquote>

<div class="insight">
<h3>✨ Insights</h3>

<p>Composition and Effects are skipped when the inputs don't change!</p>
</div>

<p>Just like <a href="https://developer.android.com/jetpack/compose/lifecycle#skipping">the documentation says</a>. But what does &quot;inputs not changing&quot; really mean? Let&#39;s find out.</p>

<p>Instead of passing in a <code>String</code>, let&#39;s create our own <code>class</code></p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Light</span><span class="p">(</span><span class="kd">val</span> <span class="nv">emoji</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
</code></pre></div>
<p>Update the <code>TrafficLight</code> and <code>ReadySetGo</code> to use <code>Light</code> instead of a <code>String</code></p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="nd">@Composable</span>
<span class="kd">fun</span> <span class="nf">ReadySetGoClass</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">count</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">Box</span><span class="p">(</span>
        <span class="n">contentAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">Center</span><span class="p">,</span>
        <span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
            <span class="p">.</span><span class="na">fillMaxSize</span><span class="p">()</span>
            <span class="p">.</span><span class="na">clickable</span> <span class="p">{</span>
                <span class="n">log</span><span class="p">(</span><span class="s">&quot;---Click---------------------&quot;</span><span class="p">)</span>
                <span class="n">count</span><span class="o">++</span>
            <span class="p">},</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="nv">step</span> <span class="o">=</span> <span class="n">count</span> <span class="o">%</span> <span class="m">3</span>
<span class="hll">        <span class="kd">val</span> <span class="nv">light</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">step</span> <span class="o">==</span> <span class="m">0</span><span class="p">)</span> <span class="n">Light</span><span class="p">(</span><span class="s">&quot;🟢&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="n">Light</span><span class="p">(</span><span class="s">&quot;🔴&quot;</span><span class="p">)</span>
</span>        <span class="kd">val</span> <span class="nv">message</span> <span class="o">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">step</span><span class="p">)</span> <span class="p">{</span>
            <span class="m">1</span> <span class="o">-&gt;</span> <span class="s">&quot;Ready&quot;</span>
            <span class="m">2</span> <span class="o">-&gt;</span> <span class="s">&quot;Set&quot;</span>
            <span class="m">0</span> <span class="o">-&gt;</span> <span class="s">&quot;GO!&quot;</span>
            <span class="k">else</span> <span class="o">-&gt;</span> <span class="s">&quot;Uh Oh!&quot;</span>
        <span class="p">}</span>
        <span class="n">Column</span><span class="p">(</span><span class="n">horizontalAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">CenterHorizontally</span><span class="p">)</span> <span class="p">{</span>
<span class="hll">            <span class="n">TrafficLight</span><span class="p">(</span><span class="n">light</span><span class="p">)</span>
</span>            <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="na">height</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
            <span class="n">Text</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="m">36.</span><span class="n">sp</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nd">@Composable</span>
<span class="kd">private</span> <span class="kd">fun</span> <span class="nf">TrafficLight</span><span class="p">(</span>
<span class="hll">    <span class="n">light</span><span class="p">:</span> <span class="n">Light</span><span class="p">,</span>
</span>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
<span class="p">)</span> <span class="p">{</span>
<span class="hll">    <span class="kd">val</span> <span class="nv">lightEmoji</span> <span class="o">=</span> <span class="n">light</span><span class="p">.</span><span class="na">emoji</span>
</span>    <span class="n">Text</span><span class="p">(</span><span class="n">lightEmoji</span><span class="p">,</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="m">120.</span><span class="n">sp</span><span class="p">,</span> <span class="n">modifier</span> <span class="o">=</span> <span class="n">modifier</span><span class="p">)</span>

<span class="hll">    <span class="n">Effects</span><span class="p">(</span><span class="s">&quot;TrafficLight(</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s">)&quot;</span><span class="p">,</span> <span class="n">key</span> <span class="o">=</span> <span class="n">light</span><span class="p">)</span>
</span><span class="p">}</span>
</code></pre></div>
<p>Here are the logs after the change</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>TrafficLight(🔴)     - Registering Effects
<a id="line-2" name="line-2"></a>TrafficLight(🔴)     - DisposableEffect
<a id="line-3" name="line-3"></a>TrafficLight(🔴)     - SideEffect
<a id="line-4" name="line-4"></a>TrafficLight(🔴)     - LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>TrafficLight(🔴)     - Registering Effects
<a id="line-7" name="line-7"></a>TrafficLight(🔴)     - onDispose
<a id="line-8" name="line-8"></a>TrafficLight(🔴)     - DisposableEffect
<a id="line-9" name="line-9"></a>TrafficLight(🔴)     - SideEffect
<a id="line-10" name="line-10"></a>TrafficLight(🔴)     - LaunchedEffect
<a id="line-11" name="line-11"></a>---Click---------------------
<a id="line-12" name="line-12"></a>TrafficLight(🟢)     - Registering Effects
<a id="line-13" name="line-13"></a>TrafficLight(🔴)     - onDispose
<a id="line-14" name="line-14"></a>TrafficLight(🟢)     - DisposableEffect
<a id="line-15" name="line-15"></a>TrafficLight(🟢)     - SideEffect
<a id="line-16" name="line-16"></a>TrafficLight(🟢)     - LaunchedEffect
</code></pre></div>
<p>Well what happened there!</p>

<p>Our <code>Light</code> doesn&#39;t implement <code>.equals()</code>. The default implementation returns true only if they are the same instances. But we are creating a new instance every time. So compose runtime sees these as different inputs.</p>

<p>Let&#39;s add a log to <code>equals()</code></p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Light</span><span class="p">(</span><span class="kd">val</span> <span class="nv">emoji</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">override</span> <span class="kd">fun</span> <span class="nf">equals</span><span class="p">(</span><span class="n">other</span><span class="p">:</span> <span class="kt">Any?</span><span class="p">):</span> <span class="kt">Boolean</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">other</span> <span class="k">is</span> <span class="n">Light</span><span class="p">)</span> <span class="p">{</span>
<span class="hll">            <span class="kd">val</span> <span class="nv">result</span> <span class="o">=</span> <span class="k">super</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class="hll">            <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">emoji</span><span class="s">.equals(</span><span class="si">${</span><span class="n">other</span><span class="p">.</span><span class="na">emoji</span><span class="si">}</span><span class="s">) = </span><span class="si">$</span><span class="n">result</span><span class="s">&quot;</span><span class="p">)</span>
</span>            <span class="k">return</span> <span class="n">result</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Haven&#39;t changed the implementation yet. Just added a log.</p>

<p>The same logs as above but with <code>equals()</code></p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>TrafficLight(🔴)     - Registering Effects
<a id="line-2" name="line-2"></a>TrafficLight(🔴)     - DisposableEffect
<a id="line-3" name="line-3"></a>TrafficLight(🔴)     - SideEffect
<a id="line-4" name="line-4"></a>TrafficLight(🔴)     - LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>🔴.equals(🔴) = false
<a id="line-7" name="line-7"></a>TrafficLight(🔴)     - Registering Effects
<a id="line-8" name="line-8"></a>🔴.equals(🔴) = false
<a id="line-9" name="line-9"></a>🔴.equals(🔴) = false
<a id="line-10" name="line-10"></a>TrafficLight(🔴)     - onDispose
<a id="line-11" name="line-11"></a>TrafficLight(🔴)     - DisposableEffect
<a id="line-12" name="line-12"></a>TrafficLight(🔴)     - SideEffect
<a id="line-13" name="line-13"></a>TrafficLight(🔴)     - LaunchedEffect
<a id="line-14" name="line-14"></a>---Click---------------------
<a id="line-15" name="line-15"></a>🔴.equals(🟢) = false
<a id="line-16" name="line-16"></a>TrafficLight(🟢)     - Registering Effects
<a id="line-17" name="line-17"></a>🔴.equals(🟢) = false
<a id="line-18" name="line-18"></a>🔴.equals(🟢) = false
<a id="line-19" name="line-19"></a>TrafficLight(🔴)     - onDispose
<a id="line-20" name="line-20"></a>TrafficLight(🟢)     - DisposableEffect
<a id="line-21" name="line-21"></a>TrafficLight(🟢)     - SideEffect
<a id="line-22" name="line-22"></a>TrafficLight(🟢)     - LaunchedEffect
</code></pre></div>
<p>So compose runtime compared the inputs. It observed that they are different (<code>.equals()</code> returned <code>false</code>), so ran the composable with the new input. It then compared the inputs again, to see if it has to run the <code>DisposableEffect</code> and the <code>LaunchedEffect</code> and ran them again because it received <code>false</code>.</p>

<blockquote>
<p>After all <code>DisposableEffect</code> and <code>LaunchedEffect</code> are <code>Composable</code> functions themselves</p>
</blockquote>

<p>Let&#39;s implement <code>equals()</code></p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Light</span><span class="p">(</span><span class="kd">val</span> <span class="nv">emoji</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">override</span> <span class="kd">fun</span> <span class="nf">equals</span><span class="p">(</span><span class="n">other</span><span class="p">:</span> <span class="kt">Any?</span><span class="p">):</span> <span class="kt">Boolean</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">other</span> <span class="k">is</span> <span class="n">Light</span><span class="p">)</span> <span class="p">{</span>
<span class="hll">            <span class="kd">val</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">emoji</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="na">emoji</span>
</span>            <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">emoji</span><span class="s">.equals(</span><span class="si">${</span><span class="n">other</span><span class="p">.</span><span class="na">emoji</span><span class="si">}</span><span class="s">) = </span><span class="si">$</span><span class="n">result</span><span class="s">&quot;</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">result</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>TrafficLight(🔴)     - Registering Effects
<a id="line-2" name="line-2"></a>TrafficLight(🔴)     - DisposableEffect
<a id="line-3" name="line-3"></a>TrafficLight(🔴)     - SideEffect
<a id="line-4" name="line-4"></a>TrafficLight(🔴)     - LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>🔴.equals(🔴) = true
<a id="line-7" name="line-7"></a>---Click---------------------
<a id="line-8" name="line-8"></a>🔴.equals(🟢) = false
<a id="line-9" name="line-9"></a>TrafficLight(🟢)     - Registering Effects
<a id="line-10" name="line-10"></a>🔴.equals(🟢) = false
<a id="line-11" name="line-11"></a>🔴.equals(🟢) = false
<a id="line-12" name="line-12"></a>TrafficLight(🔴)     - onDispose
<a id="line-13" name="line-13"></a>TrafficLight(🟢)     - DisposableEffect
<a id="line-14" name="line-14"></a>TrafficLight(🟢)     - SideEffect
<a id="line-15" name="line-15"></a>TrafficLight(🟢)     - LaunchedEffect
</code></pre></div>
<p>Back to normal.</p>

<p>Let&#39;s summarize all the insights</p>

<div class="insight">
<h3>✨ Insights</h3>
<p>➡️ On Entering Composition: </p>
<ul>
    <li>Our `Composable` function runs first</li>
    <li>All the Side Effects run in the order they are declared / registered</li>
    <li>Among the different Side Effects - <code>DisposableEffect</code>s run first, followed by <code>SideEffect</code>s, followed by <code>LaunchedEffect</code></li>
</ul>

<p>⬅️ On Exiting Composition: </p>
<ul>
    <li><code>DisposableEffect</code>s are <i>disposed</i> in the <b>reverse</b> order they are declared / registered. <b>L</b>ast <b>I</b>n <b>F</b>irst <b>O</b>ut - LIFO. Like a stack!</li>
</ul>

<p>🔀 When a composable is being replaced with another or recomposed with the new state:</p>
<ul>
<li>Incoming <code>DisposableEffect</code>s are <b>registered before</b> the outgoing <code>DisposableEffect</code>s are <b>disposed</b></li>
<li>Incoming <code>DisposableEffect</code>s are <b>run after</b> the outgoing <code>DisposableEffect</code>s are <b>disposed</b></li>
</ul>

<p>💫 When animated, the outgoing <code>DisposableEffect</code>s are disposed only after the animation is complete.</p>

<p>🚫 Composition and Effects are skipped when the inputs don't change. Inputs are compared using their <code>equals()</code> method</p>
</div>

	  ]]></description>
	</item>


</channel>
</rss>
