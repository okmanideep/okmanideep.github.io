<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="https://okmanideep.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://okmanideep.github.io/" rel="alternate" type="text/html" /><updated>2022-04-15T18:59:59+05:30</updated><id>https://okmanideep.github.io/feed.xml</id><title type="html">@okmanideep</title><subtitle>Android · Development · Design</subtitle><author><name>Manideep Polireddi</name></author><entry><title type="html">Understanding Composition and Side Effects</title><link href="https://okmanideep.github.io/understanding-composition-and-side-effects" rel="alternate" type="text/html" title="Understanding Composition and Side Effects" /><published>2022-04-01T23:30:00+05:30</published><updated>2022-04-01T23:30:00+05:30</updated><id>https://okmanideep.github.io/understanding-composition-and-side-effects</id><content type="html" xml:base="https://okmanideep.github.io/understanding-composition-and-side-effects"><![CDATA[<style>
.insight {
    background: #3B4354;
    border-radius: 3px;
    padding: 12px;
}
.insight > :first-child {
    margin-top: 0;
}
.insight > :last-child {
    margin-bottom: 0;
}
</style>

<p>With compose, we write a lot of functions and lambdas in our code. It is essential to know the order of execution of these functions, if and when are they executed.</p>

<p>Let&#39;s dive in. </p>

<p>We are going to use the following <code>Composable</code> to find out the order of execution and understand in what order our code executes during runtime.</p>

<h2>🛠 Setup</h2>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="nd">@Composable</span>
<a id="line-2" name="line-2"></a><span class="kd">private</span> <span class="kd">fun</span> <span class="nf">TrafficLight</span><span class="p">(</span>
<a id="line-3" name="line-3"></a>    <span class="n">lightEmoji</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
<a id="line-4" name="line-4"></a>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
<a id="line-5" name="line-5"></a><span class="p">)</span> <span class="p">{</span>
<a id="line-6" name="line-6"></a>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> Composition 1&quot;</span><span class="p">)</span>
<a id="line-7" name="line-7"></a>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">lightEmoji</span><span class="p">)</span> <span class="p">{</span>
<a id="line-8" name="line-8"></a>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> LaunchedEffect 1&quot;</span><span class="p">)</span>
<a id="line-9" name="line-9"></a>    <span class="p">}</span>
<a id="line-10" name="line-10"></a>    <span class="n">SideEffect</span> <span class="p">{</span>
<a id="line-11" name="line-11"></a>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> SideEffect 1&quot;</span><span class="p">)</span>
<a id="line-12" name="line-12"></a>    <span class="p">}</span>
<a id="line-13" name="line-13"></a>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">lightEmoji</span><span class="p">)</span> <span class="p">{</span>
<a id="line-14" name="line-14"></a>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> DisposableEffect 1&quot;</span><span class="p">)</span>
<a id="line-15" name="line-15"></a>
<a id="line-16" name="line-16"></a>        <span class="n">onDispose</span> <span class="p">{</span>
<a id="line-17" name="line-17"></a>            <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> onDispose 1&quot;</span><span class="p">)</span>
<a id="line-18" name="line-18"></a>        <span class="p">}</span>
<a id="line-19" name="line-19"></a>    <span class="p">}</span>
<a id="line-20" name="line-20"></a>
<a id="line-21" name="line-21"></a>    <span class="n">Text</span><span class="p">(</span><span class="n">lightEmoji</span><span class="p">,</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="m">120.</span><span class="n">sp</span><span class="p">,</span> <span class="n">modifier</span> <span class="o">=</span> <span class="n">modifier</span><span class="p">)</span>
<a id="line-22" name="line-22"></a>
<a id="line-23" name="line-23"></a>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> Composition 2&quot;</span><span class="p">)</span>
<a id="line-24" name="line-24"></a>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">lightEmoji</span><span class="p">)</span> <span class="p">{</span>
<a id="line-25" name="line-25"></a>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> LaunchedEffect 2&quot;</span><span class="p">)</span>
<a id="line-26" name="line-26"></a>    <span class="p">}</span>
<a id="line-27" name="line-27"></a>    <span class="n">SideEffect</span> <span class="p">{</span>
<a id="line-28" name="line-28"></a>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> SideEffect 2&quot;</span><span class="p">)</span>
<a id="line-29" name="line-29"></a>    <span class="p">}</span>
<a id="line-30" name="line-30"></a>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">lightEmoji</span><span class="p">)</span> <span class="p">{</span>
<a id="line-31" name="line-31"></a>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> DisposableEffect 2&quot;</span><span class="p">)</span>
<a id="line-32" name="line-32"></a>
<a id="line-33" name="line-33"></a>        <span class="n">onDispose</span> <span class="p">{</span>
<a id="line-34" name="line-34"></a>            <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> onDispose 2&quot;</span><span class="p">)</span>
<a id="line-35" name="line-35"></a>        <span class="p">}</span>
<a id="line-36" name="line-36"></a>    <span class="p">}</span>
<a id="line-37" name="line-37"></a><span class="p">}</span>
</code></pre></div>
<p>Just a bunch of logs around a <code>Text</code></p>

<h2>Touch And Go</h2>

<p>We are going to start by adding and removing this <code>TrafficLight</code> on touch as shown below</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="nd">@Composable</span>
<a id="line-2" name="line-2"></a><span class="kd">fun</span> <span class="nf">TouchAndGo</span><span class="p">()</span> <span class="p">{</span>
<a id="line-3" name="line-3"></a>    <span class="kd">var</span> <span class="nv">isVisible</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="p">}</span>
<a id="line-4" name="line-4"></a>    <span class="n">Box</span><span class="p">(</span>
<a id="line-5" name="line-5"></a>        <span class="n">contentAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">Center</span><span class="p">,</span>
<a id="line-6" name="line-6"></a>        <span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
<a id="line-7" name="line-7"></a>            <span class="p">.</span><span class="na">fillMaxSize</span><span class="p">()</span>
<a id="line-8" name="line-8"></a>            <span class="p">.</span><span class="na">clickable</span> <span class="p">{</span>
<a id="line-9" name="line-9"></a>                <span class="n">log</span><span class="p">(</span><span class="s">&quot;---Click---------------------&quot;</span><span class="p">)</span>
<a id="line-10" name="line-10"></a>                <span class="n">isVisible</span> <span class="o">=</span> <span class="o">!</span><span class="n">isVisible</span>
<a id="line-11" name="line-11"></a>            <span class="p">},</span>
<a id="line-12" name="line-12"></a>    <span class="p">)</span> <span class="p">{</span>
<a id="line-13" name="line-13"></a>        <span class="k">if</span> <span class="p">(</span><span class="n">isVisible</span><span class="p">)</span> <span class="p">{</span>
<a id="line-14" name="line-14"></a>            <span class="n">TrafficLight</span><span class="p">(</span><span class="n">lightEmoji</span> <span class="o">=</span> <span class="s">&quot;🟢&quot;</span><span class="p">)</span>
<a id="line-15" name="line-15"></a>        <span class="p">}</span>
<a id="line-16" name="line-16"></a>    <span class="p">}</span>
<a id="line-17" name="line-17"></a><span class="p">}</span>
</code></pre></div>
<p>Initially we show nothing. On click, we show the green light 🟢.</p>

<video width="320" height="320" autoplay muted loop>
  <source src="https://i.imgur.com/TCy72F9.mp4" type="video/mp4">
</video>

<p>So these are the logs</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>---Click---------------------
<a id="line-2" name="line-2"></a>🟢 Composition - 1
<a id="line-3" name="line-3"></a>🟢 Composition - 2
<a id="line-4" name="line-4"></a>🟢 DisposableEffect - 1
<a id="line-5" name="line-5"></a>🟢 DisposableEffect - 2
<a id="line-6" name="line-6"></a>🟢 SideEffect - 1
<a id="line-7" name="line-7"></a>🟢 SideEffect - 2
<a id="line-8" name="line-8"></a>🟢 LaunchedEffect - 1
<a id="line-9" name="line-9"></a>🟢 LaunchedEffect - 2
<a id="line-10" name="line-10"></a>---Click---------------------
<a id="line-11" name="line-11"></a>🟢 onDispose - 2
<a id="line-12" name="line-12"></a>🟢 onDispose - 1
</code></pre></div>
<div class="insight">
<h3>✨ Insights</h3>

<p>When a <code>Composable</code> is added to the UI:</p>

<ul>
<li>Composition (our <code>@Composable</code> function) runs first</li>
<li>Then all the <code>DisposableEffect</code>s in the order present in the code</li>
<li>Then all the <code>SideEffect</code>s in the order present in the code</li>
<li>and then all the <code>LaunchedEffect</code>s in the order present in the code</li>
</ul>

<p>When a <code>Composable</code> is removed from the UI:</p>

<ul>
<li>All the <code>onDispose</code>s run in <strong>reverse order</strong> as present in the code</li>
</ul>
</div>

<h3>💡 Tip!</h3>

<p>Arrange your code to reflect the order of execution. Keep all the effects at the end of the function in the order of <code>DisposableEffect</code>, <code>SideEffect</code> and <code>LaunchedEffect</code>. It helps discover some code smells by making them slightly more apparent.</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="nd">@Composable</span>
<a id="line-2" name="line-2"></a><span class="kd">fun</span> <span class="nf">MyComponent</span><span class="p">(</span><span class="cm">/*...*/</span><span class="p">)</span> <span class="p">{</span>
<a id="line-3" name="line-3"></a>    <span class="c1">// Describe the UI</span>
<a id="line-4" name="line-4"></a>
<a id="line-5" name="line-5"></a>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="cm">/*...*/</span><span class="p">)</span> <span class="p">{</span>
<a id="line-6" name="line-6"></a>        <span class="c1">// acquire resource / attach</span>
<a id="line-7" name="line-7"></a>
<a id="line-8" name="line-8"></a>        <span class="n">onDispose</span> <span class="p">{</span>
<a id="line-9" name="line-9"></a>            <span class="c1">// release resource / detach</span>
<a id="line-10" name="line-10"></a>        <span class="p">}</span>
<a id="line-11" name="line-11"></a>    <span class="p">}</span>
<a id="line-12" name="line-12"></a>    <span class="n">SideEffect</span> <span class="p">{</span>
<a id="line-13" name="line-13"></a>        <span class="c1">// ...</span>
<a id="line-14" name="line-14"></a>    <span class="p">}</span>
<a id="line-15" name="line-15"></a>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="cm">/*...*/</span><span class="p">)</span> <span class="p">{</span>
<a id="line-16" name="line-16"></a>        <span class="c1">// ...</span>
<a id="line-17" name="line-17"></a>    <span class="p">}</span>
<a id="line-18" name="line-18"></a><span class="p">}</span>
</code></pre></div>
<hr>

<h2>Stop And Go</h2>

<p>Toggle between 🟢 and 🔴 on click</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="nd">@Composable</span>
<a id="line-2" name="line-2"></a><span class="kd">fun</span> <span class="nf">StopAndGo</span><span class="p">()</span> <span class="p">{</span>
<a id="line-3" name="line-3"></a>    <span class="kd">var</span> <span class="nv">go</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">}</span>
<a id="line-4" name="line-4"></a>
<a id="line-5" name="line-5"></a>    <span class="n">Box</span><span class="p">(</span>
<a id="line-6" name="line-6"></a>        <span class="n">contentAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">Center</span><span class="p">,</span>
<a id="line-7" name="line-7"></a>        <span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
<a id="line-8" name="line-8"></a>            <span class="p">.</span><span class="na">fillMaxSize</span><span class="p">()</span>
<a id="line-9" name="line-9"></a>            <span class="p">.</span><span class="na">clickable</span> <span class="p">{</span>
<a id="line-10" name="line-10"></a>                <span class="n">log</span><span class="p">(</span><span class="s">&quot;---Click---------------------&quot;</span><span class="p">)</span>
<a id="line-11" name="line-11"></a>                <span class="n">go</span> <span class="o">=</span> <span class="o">!</span><span class="n">go</span>
<a id="line-12" name="line-12"></a>            <span class="p">},</span>
<a id="line-13" name="line-13"></a>    <span class="p">)</span> <span class="p">{</span>
<a id="line-14" name="line-14"></a>        <span class="kd">val</span> <span class="nv">light</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">go</span><span class="p">)</span> <span class="s">&quot;🟢&quot;</span> <span class="k">else</span> <span class="s">&quot;🔴&quot;</span>
<a id="line-15" name="line-15"></a>        <span class="n">TrafficLight</span><span class="p">(</span><span class="n">lightEmoji</span> <span class="o">=</span> <span class="n">light</span><span class="p">)</span>
<a id="line-16" name="line-16"></a>    <span class="p">}</span>
<a id="line-17" name="line-17"></a><span class="p">}</span>
</code></pre></div>
<video width="320" height="320" autoplay muted loop>
  <source src="https://i.imgur.com/pJWzmgh.mp4" type="video/mp4">
</video>

<p>Let&#39;s look at the logs. For brevity, we removed multiple logs for Composition and Effects</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>🟢 Composition
<a id="line-2" name="line-2"></a>🟢 DisposableEffect
<a id="line-3" name="line-3"></a>🟢 SideEffect
<a id="line-4" name="line-4"></a>🟢 LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>🔴 Composition
<a id="line-7" name="line-7"></a>🟢 onDispose
<a id="line-8" name="line-8"></a>🔴 DisposableEffect
<a id="line-9" name="line-9"></a>🔴 SideEffect
<a id="line-10" name="line-10"></a>🔴 LaunchedEffect
</code></pre></div>
<p>One might have expected this, but it is an important aspect to keep in mind.</p>

<div class="insight">
<h3>✨ Insights</h3>
<ul>
<li>Composition of the <i>incoming composable</i>* runs before the <i>outgoing composable</i>* disposes (<code>onDispose</code>)</li>
<li><code>DisposableEffect</code> of the <i>incoming composable</i>* runs after the <i>outgoing composable</i>* disposes (<code>onDispose</code>)</li>
</ul>

</div>

<blockquote>
<p>*There is no notion of incoming and outgoing composable <em>objects</em> at runtime in the above example. I have chosen to word it that way since we are accustomed to object oriented thinking. Essentially at runtime, compose notices a <code>State</code> change, re-runs the corresponding code that is accessing the state. The re-run is what informs the runtime of which <code>DisposableEffect</code>s to dispose. We will come back to this notion of objects at runtime later</p>
</blockquote>

<h2>Stop Fade Go</h2>

<p>More often than not, we animate our changes. Let&#39;s look at the order of execution when we add animation to the above example</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="nd">@Composable</span>
<span class="kd">fun</span> <span class="nf">StopFadeGo</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">go</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">Box</span><span class="p">(</span>
        <span class="n">contentAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">Center</span><span class="p">,</span>
        <span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
            <span class="p">.</span><span class="na">fillMaxSize</span><span class="p">()</span>
            <span class="p">.</span><span class="na">clickable</span> <span class="p">{</span>
                <span class="n">log</span><span class="p">(</span><span class="s">&quot;---Click---------------------&quot;</span><span class="p">)</span>
                <span class="n">go</span> <span class="o">=</span> <span class="o">!</span><span class="n">go</span>
            <span class="p">},</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="nv">light</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">go</span><span class="p">)</span> <span class="s">&quot;🟢&quot;</span> <span class="k">else</span> <span class="s">&quot;🔴&quot;</span>
<span class="hll">        <span class="n">Crossfade</span><span class="p">(</span><span class="n">targetState</span> <span class="o">=</span> <span class="n">light</span><span class="p">)</span> <span class="p">{</span>
</span><span class="hll">            <span class="n">TrafficLight</span><span class="p">(</span><span class="n">lightEmoji</span> <span class="o">=</span> <span class="nb">it</span><span class="p">)</span>
</span><span class="hll">        <span class="p">}</span>
</span>    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>🟢 Composition
<a id="line-2" name="line-2"></a>🟢 DisposableEffect
<a id="line-3" name="line-3"></a>🟢 SideEffect
<a id="line-4" name="line-4"></a>🟢 LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>🔴 Composition
<a id="line-7" name="line-7"></a>🔴 DisposableEffect
<a id="line-8" name="line-8"></a>🔴 SideEffect
<a id="line-9" name="line-9"></a>🔴 LaunchedEffect
<a id="line-10" name="line-10"></a>🟢 onDispose
</code></pre></div>
<div class="insight">
<h3>✨ Insights</h3>

<p>When animated, the outgoing composable is disposed only after the animation is complete</p>
</div>

<p>Might feel obvious in hindsight. But it is important to keep in mind that since the <code>DisposableEffect</code> of the incoming composable runs before the <code>onDispose</code> of the outgoing composable, if they are trying to attach to the same instance or acquire the same resource, it might create issues.</p>

<hr>

<h2>Ready Set Go</h2>

<p>🔴 Ready -&gt; 🔴 Set -&gt; 🟢 Go on click</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><a id="line-1" name="line-1"></a><span class="nd">@Composable</span>
<a id="line-2" name="line-2"></a><span class="kd">fun</span> <span class="nf">ReadySetGo</span><span class="p">()</span> <span class="p">{</span>
<a id="line-3" name="line-3"></a>    <span class="kd">var</span> <span class="nv">count</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">}</span>
<a id="line-4" name="line-4"></a>
<a id="line-5" name="line-5"></a>    <span class="n">Box</span><span class="p">(</span>
<a id="line-6" name="line-6"></a>        <span class="n">contentAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">Center</span><span class="p">,</span>
<a id="line-7" name="line-7"></a>        <span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
<a id="line-8" name="line-8"></a>            <span class="p">.</span><span class="na">fillMaxSize</span><span class="p">()</span>
<a id="line-9" name="line-9"></a>            <span class="p">.</span><span class="na">clickable</span> <span class="p">{</span>
<a id="line-10" name="line-10"></a>                <span class="n">log</span><span class="p">(</span><span class="s">&quot;---Click---------------------&quot;</span><span class="p">)</span>
<a id="line-11" name="line-11"></a>                <span class="n">count</span><span class="o">++</span>
<a id="line-12" name="line-12"></a>            <span class="p">},</span>
<a id="line-13" name="line-13"></a>    <span class="p">)</span> <span class="p">{</span>
<a id="line-14" name="line-14"></a>        <span class="kd">val</span> <span class="nv">step</span> <span class="o">=</span> <span class="n">count</span> <span class="o">%</span> <span class="m">3</span>
<a id="line-15" name="line-15"></a>        <span class="kd">val</span> <span class="nv">light</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">step</span> <span class="o">==</span> <span class="m">0</span><span class="p">)</span> <span class="s">&quot;🟢&quot;</span> <span class="k">else</span> <span class="s">&quot;🔴&quot;</span>
<a id="line-16" name="line-16"></a>        <span class="kd">val</span> <span class="nv">message</span> <span class="o">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">step</span><span class="p">)</span> <span class="p">{</span>
<a id="line-17" name="line-17"></a>            <span class="m">1</span> <span class="o">-&gt;</span> <span class="s">&quot;Ready&quot;</span>
<a id="line-18" name="line-18"></a>            <span class="m">2</span> <span class="o">-&gt;</span> <span class="s">&quot;Set&quot;</span>
<a id="line-19" name="line-19"></a>            <span class="m">0</span> <span class="o">-&gt;</span> <span class="s">&quot;GO!&quot;</span>
<a id="line-20" name="line-20"></a>            <span class="k">else</span> <span class="o">-&gt;</span> <span class="s">&quot;Uh Oh!&quot;</span>
<a id="line-21" name="line-21"></a>        <span class="p">}</span>
<a id="line-22" name="line-22"></a>        <span class="n">Column</span><span class="p">(</span><span class="n">horizontalAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">CenterHorizontally</span><span class="p">)</span> <span class="p">{</span>
<a id="line-23" name="line-23"></a>            <span class="n">TrafficLight</span><span class="p">(</span><span class="n">lightEmoji</span> <span class="o">=</span> <span class="n">light</span><span class="p">)</span>
<a id="line-24" name="line-24"></a>            <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="na">height</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
<a id="line-25" name="line-25"></a>            <span class="n">Text</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="m">36.</span><span class="n">sp</span><span class="p">)</span>
<a id="line-26" name="line-26"></a>        <span class="p">}</span>
<a id="line-27" name="line-27"></a>    <span class="p">}</span>
<a id="line-28" name="line-28"></a><span class="p">}</span>
</code></pre></div>
<video width="320" height="320" autoplay muted loop>
  <source src="https://i.imgur.com/dEqERF5.mp4" type="video/mp4">
</video>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>🔴 Composition
<a id="line-2" name="line-2"></a>🔴 DisposableEffect
<a id="line-3" name="line-3"></a>🔴 SideEffect
<a id="line-4" name="line-4"></a>🔴 LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>---Click---------------------
<a id="line-7" name="line-7"></a>🟢 Composition
<a id="line-8" name="line-8"></a>🔴 onDispose
<a id="line-9" name="line-9"></a>🟢 DisposableEffect
<a id="line-10" name="line-10"></a>🟢 SideEffect
<a id="line-11" name="line-11"></a>🟢 LaunchedEffect
</code></pre></div>
<div class="insight">
<h3>✨ Insights</h3>

<p>Composition and Effects are skipped when the inputs don't change!</p>
</div>

<p>Just like <a href="https://developer.android.com/jetpack/compose/lifecycle#skipping">the documentation says</a>. But what does &quot;inputs not changing&quot; really mean? Let&#39;s find out.</p>

<p>Instead of passing in a <code>String</code>, let&#39;s create our own <code>class</code></p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Light</span><span class="p">(</span><span class="kd">val</span> <span class="nv">emoji</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
</code></pre></div>
<p>Update the <code>TrafficLight</code> and <code>ReadySetGo</code> to use <code>Light</code> instead of a <code>String</code></p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="nd">@Composable</span>
<span class="kd">fun</span> <span class="nf">ReadySetGoClass</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">count</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">Box</span><span class="p">(</span>
        <span class="n">contentAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">Center</span><span class="p">,</span>
        <span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
            <span class="p">.</span><span class="na">fillMaxSize</span><span class="p">()</span>
            <span class="p">.</span><span class="na">clickable</span> <span class="p">{</span>
                <span class="n">log</span><span class="p">(</span><span class="s">&quot;---Click---------------------&quot;</span><span class="p">)</span>
                <span class="n">count</span><span class="o">++</span>
            <span class="p">},</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="nv">step</span> <span class="o">=</span> <span class="n">count</span> <span class="o">%</span> <span class="m">3</span>
<span class="hll">        <span class="kd">val</span> <span class="nv">light</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">step</span> <span class="o">==</span> <span class="m">0</span><span class="p">)</span> <span class="n">Light</span><span class="p">(</span><span class="s">&quot;🟢&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="n">Light</span><span class="p">(</span><span class="s">&quot;🔴&quot;</span><span class="p">)</span>
</span>        <span class="kd">val</span> <span class="nv">message</span> <span class="o">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">step</span><span class="p">)</span> <span class="p">{</span>
            <span class="m">1</span> <span class="o">-&gt;</span> <span class="s">&quot;Ready&quot;</span>
            <span class="m">2</span> <span class="o">-&gt;</span> <span class="s">&quot;Set&quot;</span>
            <span class="m">0</span> <span class="o">-&gt;</span> <span class="s">&quot;GO!&quot;</span>
            <span class="k">else</span> <span class="o">-&gt;</span> <span class="s">&quot;Uh Oh!&quot;</span>
        <span class="p">}</span>
        <span class="n">Column</span><span class="p">(</span><span class="n">horizontalAlignment</span> <span class="o">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="na">CenterHorizontally</span><span class="p">)</span> <span class="p">{</span>
<span class="hll">            <span class="n">TrafficLight</span><span class="p">(</span><span class="n">light</span><span class="p">)</span>
</span>            <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="o">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="na">height</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
            <span class="n">Text</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="m">36.</span><span class="n">sp</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nd">@Composable</span>
<span class="kd">private</span> <span class="kd">fun</span> <span class="nf">TrafficLight</span><span class="p">(</span>
<span class="hll">    <span class="n">light</span><span class="p">:</span> <span class="n">Light</span><span class="p">,</span>
</span>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="o">=</span> <span class="n">Modifier</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="nv">lightEmoji</span> <span class="o">=</span> <span class="n">light</span><span class="p">.</span><span class="na">emoji</span>
    <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> Composition&quot;</span><span class="p">)</span>

    <span class="n">Text</span><span class="p">(</span><span class="n">lightEmoji</span><span class="p">,</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="m">120.</span><span class="n">sp</span><span class="p">,</span> <span class="n">modifier</span> <span class="o">=</span> <span class="n">modifier</span><span class="p">)</span>

<span class="hll">    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">light</span><span class="p">)</span> <span class="p">{</span>
</span>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> DisposableEffect&quot;</span><span class="p">)</span>

        <span class="n">onDispose</span> <span class="p">{</span>
            <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> onDispose&quot;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">SideEffect</span> <span class="p">{</span>
        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> SideEffect&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="hll">    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">light</span><span class="p">)</span> <span class="p">{</span>
</span>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">lightEmoji</span><span class="s"> LaunchedEffect&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Here are the logs after the change</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>🔴 Composition
<a id="line-2" name="line-2"></a>🔴 DisposableEffect
<a id="line-3" name="line-3"></a>🔴 SideEffect
<a id="line-4" name="line-4"></a>🔴 LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>🔴 Composition
<a id="line-7" name="line-7"></a>🔴 onDispose
<a id="line-8" name="line-8"></a>🔴 DisposableEffect
<a id="line-9" name="line-9"></a>🔴 SideEffect
<a id="line-10" name="line-10"></a>🔴 LaunchedEffect
<a id="line-11" name="line-11"></a>---Click---------------------
<a id="line-12" name="line-12"></a>🟢 Composition
<a id="line-13" name="line-13"></a>🔴 onDispose
<a id="line-14" name="line-14"></a>🟢 DisposableEffect
<a id="line-15" name="line-15"></a>🟢 SideEffect
<a id="line-16" name="line-16"></a>🟢 LaunchedEffect
</code></pre></div>
<p>Well what happened there!</p>

<p>Our <code>Light</code> doesn&#39;t implement <code>.equals()</code>, the default implementation returns true only if they are the same instances. But we are creating a new instance every time. So compose runtime sees these as different inputs.</p>

<p>Let&#39;s add a log to equals</p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Light</span><span class="p">(</span><span class="kd">val</span> <span class="nv">emoji</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">override</span> <span class="kd">fun</span> <span class="nf">equals</span><span class="p">(</span><span class="n">other</span><span class="p">:</span> <span class="kt">Any?</span><span class="p">):</span> <span class="kt">Boolean</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">other</span> <span class="k">is</span> <span class="n">Light</span><span class="p">)</span> <span class="p">{</span>
<span class="hll">            <span class="kd">val</span> <span class="nv">result</span> <span class="o">=</span> <span class="k">super</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class="hll">            <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">emoji</span><span class="s">.equals(</span><span class="si">${</span><span class="n">other</span><span class="p">.</span><span class="na">emoji</span><span class="si">}</span><span class="s">) = </span><span class="si">$</span><span class="n">result</span><span class="s">&quot;</span><span class="p">)</span>
</span>            <span class="k">return</span> <span class="n">result</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Haven&#39;t changed the implementation yet. Just added a log.</p>

<p>The same logs as above but with <code>equals()</code></p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>🔴 Composition
<a id="line-2" name="line-2"></a>🔴 DisposableEffect
<a id="line-3" name="line-3"></a>🔴 SideEffect
<a id="line-4" name="line-4"></a>🔴 LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>🔴.equals(🔴) = false
<a id="line-7" name="line-7"></a>🔴 Composition
<a id="line-8" name="line-8"></a>🔴.equals(🔴) = false
<a id="line-9" name="line-9"></a>🔴.equals(🔴) = false
<a id="line-10" name="line-10"></a>🔴 onDispose
<a id="line-11" name="line-11"></a>🔴 DisposableEffect
<a id="line-12" name="line-12"></a>🔴 SideEffect
<a id="line-13" name="line-13"></a>🔴 LaunchedEffect
<a id="line-14" name="line-14"></a>---Click---------------------
<a id="line-15" name="line-15"></a>🔴.equals(🟢) = false
<a id="line-16" name="line-16"></a>🟢 Composition
<a id="line-17" name="line-17"></a>🔴.equals(🟢) = false
<a id="line-18" name="line-18"></a>🔴.equals(🟢) = false
<a id="line-19" name="line-19"></a>🔴 onDispose
<a id="line-20" name="line-20"></a>🟢 DisposableEffect
<a id="line-21" name="line-21"></a>🟢 SideEffect
<a id="line-22" name="line-22"></a>🟢 LaunchedEffect
</code></pre></div>
<p>So compose runtime compared the inputs. It observed that they are different (<code>.equals()</code> returned <code>false</code>), so ran the composable with the new input. It then compared the inputs again, to see if it has to run the <code>DisposableEffect</code> and the <code>LaunchedEffect</code> and ran them again because it received <code>false</code>.</p>

<p>Let&#39;s implement <code>equals()</code></p>
<div class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span></span><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Light</span><span class="p">(</span><span class="kd">val</span> <span class="nv">emoji</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">override</span> <span class="kd">fun</span> <span class="nf">equals</span><span class="p">(</span><span class="n">other</span><span class="p">:</span> <span class="kt">Any?</span><span class="p">):</span> <span class="kt">Boolean</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">other</span> <span class="k">is</span> <span class="n">Light</span><span class="p">)</span> <span class="p">{</span>
<span class="hll">            <span class="kd">val</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">emoji</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="na">emoji</span>
</span>            <span class="n">log</span><span class="p">(</span><span class="s">&quot;</span><span class="si">$</span><span class="n">emoji</span><span class="s">.equals(</span><span class="si">${</span><span class="n">other</span><span class="p">.</span><span class="na">emoji</span><span class="si">}</span><span class="s">) = </span><span class="si">$</span><span class="n">result</span><span class="s">&quot;</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">result</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>🔴 Composition
<a id="line-2" name="line-2"></a>🔴 DisposableEffect
<a id="line-3" name="line-3"></a>🔴 SideEffect
<a id="line-4" name="line-4"></a>🔴 LaunchedEffect
<a id="line-5" name="line-5"></a>---Click---------------------
<a id="line-6" name="line-6"></a>🔴.equals(🔴) = true
<a id="line-7" name="line-7"></a>---Click---------------------
<a id="line-8" name="line-8"></a>🔴.equals(🟢) = false
<a id="line-9" name="line-9"></a>🟢 Composition
<a id="line-10" name="line-10"></a>🔴.equals(🟢) = false
<a id="line-11" name="line-11"></a>🔴.equals(🟢) = false
<a id="line-12" name="line-12"></a>🔴 onDispose
<a id="line-13" name="line-13"></a>🟢 DisposableEffect
<a id="line-14" name="line-14"></a>🟢 SideEffect
<a id="line-15" name="line-15"></a>🟢 LaunchedEffect
</code></pre></div>
<p>Back to normal.</p>

<p>Let&#39;s summarize all the insights</p>

<div class="insight">
<h3>✨ Insights</h3>
<p>🟩 When a <code>Composable</code> is added to the UI:</p>

<ul>
<li>Composition (our <code>@Composable</code> function) runs first</li>
<li>Then all the <code>DisposableEffect</code>s in the order present in the code</li>
<li>Then all the <code>SideEffect</code>s in the order present in the code</li>
<li>and then all the <code>LaunchedEffect</code>s in the order present in the code</li>
</ul>

<p>🗑️  When a <code>Composable</code> is removed from the UI:</p>

<ul>
<li>All the <code>onDispose</code>s run in <strong>reverse order</strong> as present in the code</li>
</ul>

<p>🔀 When a composable is being replaced with another or recomposed with the new state:</p>
<ul>
<li>Composition of the <i>incoming composable</i>* runs before the <i>outgoing composable</i>* disposes (<code>onDispose</code>)</li>
<li><code>DisposableEffect</code> of the <i>incoming composable</i>* runs after the <i>outgoing composable</i>* disposes (<code>onDispose</code>)</li>
</ul>

<p>💫 When animated, the outgoing composable is disposed only after the animation is complete</p>

<p>🚫 Composition and Effects are skipped when the inputs don't change, according to <code>equals()</code></p>
</div>]]></content><author><name>Manideep Polireddi</name></author><category term="okmanideep" /><category term="jetpack" /><category term="compose" /><category term="android" /><summary type="html"><![CDATA[Important aspect to any framework that relies on functions is to understand when they are invoked. Read along to get a crystal clear understanding]]></summary></entry><entry><title type="html">Dependency management in multi-module gradle projects</title><link href="https://okmanideep.github.io/dependency-management-in-multi-module-gradle-projects" rel="alternate" type="text/html" title="Dependency management in multi-module gradle projects" /><published>2017-11-02T05:50:00+05:30</published><updated>2017-11-02T05:50:00+05:30</updated><id>https://okmanideep.github.io/dependency-management-in-multi-module-gradle-projects</id><content type="html" xml:base="https://okmanideep.github.io/dependency-management-in-multi-module-gradle-projects"><![CDATA[<p>Google&#39;s approach in <a href="https://github.com/googlesamples/android-architecture-components/">this google samples repo</a> seems to be tackling it very well. They actually do it across multiple projects but it applies for multiple modules as well. If you just have one module, don&#39;t bother doing this right now, but remember to do it when you decide to extract a module out.</p>

<p>Our main objectives are to</p>

<ul>
<li>Minimise the effort required to update dependecies</li>
<li>Maintain consistency in dependency versions across modules</li>
</ul>

<h2>What to do?</h2>

<h4>Step 1</h4>

<p>Declare your dependencies and versions at the root of the project.</p>

<p><code>$PROJECT_ROOT/dependencies.gradle</code></p>
<div class="highlight"><pre><code class="language-groovy" data-lang="groovy"><span></span><a id="line-1" name="line-1"></a><span class="n">ext</span><span class="o">.</span><span class="na">versions</span> <span class="o">=</span> <span class="o">[:]</span>
<a id="line-2" name="line-2"></a>
<a id="line-3" name="line-3"></a><span class="kt">def</span> <span class="n">versions</span> <span class="o">=</span> <span class="o">[:]</span>
<a id="line-4" name="line-4"></a>
<a id="line-5" name="line-5"></a><span class="n">versions</span><span class="o">.</span><span class="na">support_lib</span> <span class="o">=</span> <span class="s1">&#39;26.0.2&#39;</span>
<a id="line-6" name="line-6"></a><span class="n">versions</span><span class="o">.</span><span class="na">gson</span> <span class="o">=</span> <span class="s1">&#39;2.8.0&#39;</span>
<a id="line-7" name="line-7"></a>
<a id="line-8" name="line-8"></a><span class="n">ext</span><span class="o">.</span><span class="na">versions</span> <span class="o">=</span> <span class="n">versions</span>
<a id="line-9" name="line-9"></a>
<a id="line-10" name="line-10"></a><span class="n">ext</span><span class="o">.</span><span class="na">deps</span> <span class="o">=</span> <span class="o">[:]</span>
<a id="line-11" name="line-11"></a><span class="kt">def</span> <span class="n">deps</span> <span class="o">=</span> <span class="o">[:]</span>
<a id="line-12" name="line-12"></a>
<a id="line-13" name="line-13"></a><span class="kt">def</span> <span class="n">support_lib</span> <span class="o">=</span> <span class="o">[:]</span>
<a id="line-14" name="line-14"></a><span class="n">support_lib</span><span class="o">.</span><span class="na">app_compat</span> <span class="o">=</span> <span class="s2">&quot;com.android.support:appcompat-v7:$versions.support_lib&quot;</span>
<a id="line-15" name="line-15"></a><span class="n">support_lib</span><span class="o">.</span><span class="na">recycler_view</span> <span class="o">=</span> <span class="s2">&quot;com.android.support:recyclerview-v7:$versions.support_lib&quot;</span>
<a id="line-16" name="line-16"></a><span class="n">deps</span><span class="o">.</span><span class="na">support_lib</span> <span class="o">=</span> <span class="n">support_lib</span>
<a id="line-17" name="line-17"></a>
<a id="line-18" name="line-18"></a><span class="n">deps</span><span class="o">.</span><span class="na">gson</span> <span class="o">=</span> <span class="s2">&quot;com.google.code.gson:gson:$versions.gson&quot;</span>
<a id="line-19" name="line-19"></a>
<a id="line-20" name="line-20"></a><span class="n">ext</span><span class="o">.</span><span class="na">deps</span> <span class="o">=</span> <span class="n">deps</span>
</code></pre></div>
<p>Attaching <code>versions</code> and <code>deps</code> to extra user properties <code>ext</code> will allow you to access those variables all across the project</p>

<h4>Step 2</h4>

<p>Import the definitions at the top of root project&#39;s <code>buildScript</code> block</p>

<p><code>$PROJECT_ROOT/build.gradle</code></p>
<div class="highlight"><pre><code class="language-groovy" data-lang="groovy"><span></span><a id="line-1" name="line-1"></a><span class="n">buildScript</span> <span class="o">{</span>
<a id="line-2" name="line-2"></a>  <span class="n">apply</span> <span class="nl">from:</span> <span class="s1">&#39;dependencies.gradle&#39;</span>
<a id="line-3" name="line-3"></a>
<a id="line-4" name="line-4"></a>  <span class="c1">//left out for brevity...</span>
<a id="line-5" name="line-5"></a><span class="o">}</span>
</code></pre></div>
<h4>Final step</h4>

<p>Declare your module dependencies using the variables defined</p>

<p><code>$PROJECT_ROOT/my-module/build.gradle</code></p>
<div class="highlight"><pre><code class="language-groovy" data-lang="groovy"><span></span><a id="line-1" name="line-1"></a><span class="c1">//left for brevity...</span>
<a id="line-2" name="line-2"></a><span class="n">dependecies</span> <span class="o">{</span>
<a id="line-3" name="line-3"></a>  <span class="n">implementation</span> <span class="n">deps</span><span class="o">.</span><span class="na">support_lib</span><span class="o">.</span><span class="na">app_compat</span>
<a id="line-4" name="line-4"></a>  <span class="n">implementation</span> <span class="n">deps</span><span class="o">.</span><span class="na">support_lib</span><span class="o">.</span><span class="na">recycler_view</span>
<a id="line-5" name="line-5"></a>  <span class="n">implementation</span> <span class="n">deps</span><span class="o">.</span><span class="na">gson</span>
<a id="line-6" name="line-6"></a><span class="o">}</span>
</code></pre></div>
<h2>Approach</h2>

<p>All we have done is <strong>remove duplication</strong> by reusing the version and dependency declarations done at one single place. Since all modules point to the same declaration, they all are in sync. And since there is only one declaration per dependency in the project, it is easy to find and update that one dependency.</p>

<h2>IntelliJ doesn&#39;t help you much here</h2>

<h4>Make your variable names easier to debug</h4>

<p>Once you declare the variables, IntelliJ doesn&#39;t auto complete or suggest them else where when you are editing the gradle files. So make sure your variable name usages are proper and easily debuggable. That is intension behind using camel case here(YMMV).</p>

<h4>Do not change all the dependencies at once</h4>

<p>The error messages are not specific enough to figure out which variable name of dependency path you messed up. You can go ahead and define all the variables at once but add/use them one by one and sync your gradle file after each step to avoid frustrating debugging sessions.</p>

<h2>Feedback</h2>

<p>What do you think of this approach? Is there a better way? I am actually curious how this changes when we use kotlin to write gradle files. <a href="https://twitter.com/okmanideep">Let me know</a> your feedback.</p>]]></content><author><name>Manideep Polireddi</name></author><category term="okmanideep" /><category term="android" /><category term="gradle" /><summary type="html"><![CDATA[Simple things you can do to improve your gradle/android dependency management]]></summary></entry><entry><title type="html">Improve your Android build times</title><link href="https://okmanideep.github.io/improve-android-build-times" rel="alternate" type="text/html" title="Improve your Android build times" /><published>2016-04-06T01:40:00+05:30</published><updated>2016-04-06T01:40:00+05:30</updated><id>https://okmanideep.github.io/improve-android-build-times</id><content type="html" xml:base="https://okmanideep.github.io/improve-android-build-times"><![CDATA[<p>If you have the time to watch the video, go ahead. <a href="https://twitter.com/madisp">Madis Pink</a> goes over each optimisation you can do very carefully and how you can profile the gradle build process to identify the bottlenecks of your builds. If not, go ahead do the changes mentioned below, which will take less than two minutes and enjoy a much smaller build times.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/AbNhen_zn-c" frameborder="0" allowfullscreen></iframe>

<h2>Optimisations</h2>

<h4>The minSdk 21 trick</h4>

<p>It doesn&#39;t matter your app is over the 65K method limit or not, enabling multiDex and having product flavors like this help a lot.  </p>
<div class="highlight"><pre><code class="language-groovy" data-lang="groovy"><span></span><a id="line-1" name="line-1"></a><span class="n">productFlavors</span> <span class="o">{</span>
<a id="line-2" name="line-2"></a>    <span class="n">dev</span> <span class="o">{</span>
<a id="line-3" name="line-3"></a>        <span class="n">multiDexEnabled</span> <span class="kc">true</span>
<a id="line-4" name="line-4"></a>        <span class="n">minSdkVersion</span> <span class="mi">21</span>
<a id="line-5" name="line-5"></a>    <span class="o">}</span>
<a id="line-6" name="line-6"></a>    <span class="n">prod</span> <span class="o">{</span>
<a id="line-7" name="line-7"></a>        <span class="n">multiDexEnabled</span> <span class="kc">true</span>
<a id="line-8" name="line-8"></a>        <span class="n">minSdkVersion</span> <span class="mi">15</span>
<a id="line-9" name="line-9"></a>    <span class="o">}</span>
<a id="line-10" name="line-10"></a><span class="o">}</span>
</code></pre></div>
<p>And also keep in mind that <strong>Instant Run</strong> has <a href="https://twitter.com/tornorbye/status/717446584284241921">some overhead</a> on the dex method count in your debug builds, which might just make your method count go over the limit.</p>

<p>On my machine for my project 
<code>./gradlew :app:assembleProdDebug</code> takes <strong>55.623s</strong> and <code>./gradlew :app:assembleDevDebug</code> takes <strong>12.41s</strong>!</p>

<p>So yeah. Do it.</p>

<h4>Use a Daemon</h4>

<p>Using a daemon essentially means, gradle keeps a JVM and gradle instance running after the first build and reuses the same for subsequent builds. Android Studio <strong>already uses a daemon</strong> for every build that is triggered from the IDE, but this is very useful for builds triggered from the command line.</p>

<p><strong>Dry Run</strong> without daemon</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span></span><a id="line-1" name="line-1"></a>./gradlew :app:assembleDebug --dry-run
</code></pre></div>
<p>Output:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>BUILD SUCCESSFUL
<a id="line-2" name="line-2"></a>
<a id="line-3" name="line-3"></a>Total time: 11.657 secs
<a id="line-4" name="line-4"></a>
<a id="line-5" name="line-5"></a>This build could be faster, please consider using the Gradle Daemon: https://docs.gradle.org/2.10/userguide/gradle_daemon.html
</code></pre></div>
<h4>Enabling gradle daemon</h4>

<p>In your <code>~/.gradle/gradle.properties</code></p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>org.gradle.daemon=true
</code></pre></div>
<p><strong>Dry Run output after enabling daemon</strong></p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>BUILD SUCCESSFUL
<a id="line-2" name="line-2"></a>
<a id="line-3" name="line-3"></a>Total time: 1.757 secs
</code></pre></div>
<h4>Upgradle your gradle version</h4>

<p>The gradle team is constantly optimising the build performance and it is wise to be using the latest version for the best performance. Here is how you change it<br>
In <code>&lt;Project Root&gt;/gradle/wrapper/</code><br>
Edit <code>gradle-wrapper.properties</code> and upgrade gradle <code>distributionUrl</code> to the <a href="http://gradle.org/gradle-download/">latest</a>.</p>

<blockquote>
<p>The difference will be substantially good if you are upgrading from or below <code>2.4</code></p>
</blockquote>

<h4>Use JDK 8</h4>

<p>Groovy, being a dynamic language, can really benifit from the <code>invoke dynamic</code> instruction in Java 7 and above. So using JDK7 or JDK8 will certainly be helpful.</p>

<ul>
<li>Download and install <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">JDK 8</a></li>
<li><code>Cmd+Shift+A</code> or <code>Ctrl+Shift+A</code>, type <code>Project Structure</code> and change <code>JDK Location</code> to JDK 8 location</li>
</ul>

<h4>Parallel Execution</h4>

<p>If you have modules that are standalone, you can improve the build time a bit by enabling parallel execution.<br>
In your <code>./gradle/gradle.properties</code> or <code>&lt;Project Root&gt;/gradle.properties</code>, add this line</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>org.gradle.parallel=true
</code></pre></div>
<h2>Common Pitfalls</h2>

<h4>Dynamic dependencies</h4>

<p>Use definite version numbers for your dependencies in your gradle</p>
<div class="highlight"><pre><code class="language-groovy" data-lang="groovy"><span></span><a id="line-1" name="line-1"></a><span class="c1">//Do NOT do this</span>
<a id="line-2" name="line-2"></a><span class="n">compile</span> <span class="s1">&#39;com.google.code.gson:gson:2.+&#39;</span>
<a id="line-3" name="line-3"></a>
<a id="line-4" name="line-4"></a><span class="c1">//Do this instead</span>
<a id="line-5" name="line-5"></a><span class="n">compile</span> <span class="s1">&#39;com.google.code.gson:gson:2.3&#39;</span>
</code></pre></div>
<p>This avoids the problem of gradle always making a network request to check for the latest version of the dependency</p>

<h4>Avoid heavy computation</h4>

<p>You can find snippets like this on stack overflow that aim to make versioning easier for you</p>
<div class="highlight"><pre><code class="language-groovy" data-lang="groovy"><span></span><a id="line-1" name="line-1"></a><span class="kt">def</span> <span class="n">cmd</span> <span class="o">=</span> <span class="s1">&#39;git rev-list HEAD --first-parent --count&#39;</span>
<a id="line-2" name="line-2"></a><span class="kt">def</span> <span class="n">gitVersion</span> <span class="o">=</span> <span class="n">cmd</span><span class="o">.</span><span class="na">execute</span><span class="o">().</span><span class="na">text</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">toInteger</span><span class="o">()</span>
<a id="line-3" name="line-3"></a>
<a id="line-4" name="line-4"></a><span class="n">android</span> <span class="o">{</span>
<a id="line-5" name="line-5"></a>  <span class="n">defaultConfig</span> <span class="o">{</span>
<a id="line-6" name="line-6"></a>    <span class="n">versionCode</span> <span class="n">gitVersion</span>
<a id="line-7" name="line-7"></a>  <span class="o">}</span>
<a id="line-8" name="line-8"></a><span class="o">}</span>
</code></pre></div>
<p>The problem with this code is - gradle needs to count the number of commits for every build. For a large repo which has around <code>20000</code> commits, it takes around <strong>half a second</strong> to just count the number of commits.</p>

<h4>That&#39;s it</h4>

<p>After these optimisations your first build might take the same amount of time, but trust me your <strong>subsequent builds will be much faster</strong> overall. </p>

<p>Also there is one more very important optimisation you can do</p>

<h4>Get an SSD</h4>

<p>Please do.</p>]]></content><author><name>Manideep Polireddi</name></author><category term="okmanideep" /><category term="android" /><category term="gradle" /><summary type="html"><![CDATA[Simple things you can do to improve your gradle/android build time a lot]]></summary></entry><entry><title type="html">RxConfusions - Part 1 : Map and FlatMap</title><link href="https://okmanideep.github.io/RxConfusions-1-Map-and-FlatMap" rel="alternate" type="text/html" title="RxConfusions - Part 1 : Map and FlatMap" /><published>2015-12-02T01:40:00+05:30</published><updated>2015-12-02T01:40:00+05:30</updated><id>https://okmanideep.github.io/RxConfusions-1-Map-and-FlatMap</id><content type="html" xml:base="https://okmanideep.github.io/RxConfusions-1-Map-and-FlatMap"><![CDATA[<p>If you don&#39;t know what RxJava is or you aren&#39;t comfortable with the terms <code>Observable</code>, <code>Observer</code>, <code>Operator</code> and <code>Subscriber</code>, I suggest you have a look at <a href="http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/">Grokking RxJava</a> series by <a href="https://twitter.com/danlew42">Dan Lew</a>. </p>

<p>If you have surfed through some RxJava content on the web, you should have come accross the <code>map()</code> operator. It is exactly what you think it is. But you might have seen people using the <code>flatMap()</code> operator in similar senarios which might have confused you a bit. Let&#39;s use them both in a small example and observe the effects of these operators.</p>

<p>Let&#39;s use this simple <code>Observer</code> for logging</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span><a id="line-1" name="line-1"></a><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompleted</span><span class="p">()</span> <span class="p">{</span>
<a id="line-2" name="line-2"></a>    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;onCompleted&quot;</span><span class="p">);</span>
<a id="line-3" name="line-3"></a><span class="p">}</span>
<a id="line-4" name="line-4"></a>
<a id="line-5" name="line-5"></a><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="p">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
<a id="line-6" name="line-6"></a>    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">printf</span><span class="p">(</span><span class="s">&quot;onError: %s\n&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
<a id="line-7" name="line-7"></a><span class="p">}</span>
<a id="line-8" name="line-8"></a>
<a id="line-9" name="line-9"></a><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="p">(</span><span class="n">String</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
<a id="line-10" name="line-10"></a>    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">printf</span><span class="p">(</span><span class="s">&quot;onNext: %s\n&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
<a id="line-11" name="line-11"></a><span class="p">}</span>
</code></pre></div>
<h4>Simple use of map operator</h4>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span><a id="line-1" name="line-1"></a><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
<a id="line-2" name="line-2"></a>    <span class="n">Printer</span> <span class="n">printer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Printer</span><span class="p">();</span>
<a id="line-3" name="line-3"></a>    <span class="n">String</span><span class="o">[]</span> <span class="n">names</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="p">{</span><span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="s">&quot;Samuel&quot;</span><span class="p">,</span> <span class="s">&quot;Micheal&quot;</span><span class="p">,</span> <span class="s">&quot;Tom&quot;</span><span class="p">};</span>
<a id="line-4" name="line-4"></a>    <span class="n">printer</span><span class="p">.</span><span class="na">printTitlesUsingMap</span><span class="p">(</span><span class="n">names</span><span class="p">);</span>
<a id="line-5" name="line-5"></a><span class="p">}</span>
<a id="line-6" name="line-6"></a>
<a id="line-7" name="line-7"></a><span class="kd">private</span> <span class="kt">void</span> <span class="nf">printTitlesUsingMap</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">names</span><span class="p">)</span> <span class="p">{</span>
<a id="line-8" name="line-8"></a>    <span class="n">Observable</span><span class="p">.</span><span class="na">from</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
<a id="line-9" name="line-9"></a>            <span class="p">.</span><span class="na">map</span><span class="p">(</span><span class="n">Printer</span><span class="p">::</span><span class="n">getTitle</span><span class="p">)</span>
<a id="line-10" name="line-10"></a>            <span class="p">.</span><span class="na">subscribe</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
<a id="line-11" name="line-11"></a><span class="p">}</span>
<a id="line-12" name="line-12"></a>
<a id="line-13" name="line-13"></a><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="p">(</span><span class="n">String</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
<a id="line-14" name="line-14"></a>    <span class="k">return</span> <span class="n">String</span><span class="p">.</span><span class="na">format</span><span class="p">(</span><span class="s">&quot;%s - %d&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">.</span><span class="na">length</span><span class="p">());</span>
<a id="line-15" name="line-15"></a><span class="p">}</span>
</code></pre></div>
<p>Output :</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>onNext: John - 4
<a id="line-2" name="line-2"></a>onNext: Micheal - 7
<a id="line-3" name="line-3"></a>onNext: Tom - 3
<a id="line-4" name="line-4"></a>onNext: Samuel - 6
<a id="line-5" name="line-5"></a>onCompleted
</code></pre></div>
<p>Lets make it a little interesting</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="p">(</span><span class="n">String</span> <span class="n">name</span><span class="p">)</span> <span class="kd">throws</span> <span class="n">IllegalArgumentException</span><span class="p">{</span>
<span class="hll">      <span class="k">if</span><span class="p">(</span><span class="s">&quot;Micheal&quot;</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">name</span><span class="p">))</span> <span class="p">{</span>
</span><span class="hll">          <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">&quot;Too many Micheals&quot;</span><span class="p">);</span>
</span><span class="hll">      <span class="p">}</span>
</span>      <span class="k">return</span> <span class="n">String</span><span class="p">.</span><span class="na">format</span><span class="p">(</span><span class="s">&quot;%s - %d&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">.</span><span class="na">length</span><span class="p">());</span>
  <span class="p">}</span>
</code></pre></div>
<p>Output :</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>onNext: John - 4
<a id="line-2" name="line-2"></a>onNext: Samuel - 6
<a id="line-3" name="line-3"></a>onError: java.lang.IllegalArgumentException: Too many Micheals
</code></pre></div>
<p>Even though there are too many Micheals, you don&#39;t want to stop printing once a Micheal arrives. You might be thinking lets use <code>filter()</code> to filter out <code>Micheal</code> but let us assume the printer doesn&#39;t know when <code>getTitle()</code> fails. Operators like <code>map()</code> can&#39;t change the flow items, they just modify the items which are emitted. This is when operators like <code>flatMap()</code> come in handly</p>

<h4>Enter the FlatMap</h4>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">printTitlesUsingFlatMap</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">names</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">Observable</span><span class="p">.</span><span class="na">from</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
              <span class="p">.</span><span class="na">flatMap</span><span class="p">(</span><span class="n">Printer</span><span class="p">::</span><span class="n">getTitleObservable</span><span class="p">)</span>
              <span class="p">.</span><span class="na">subscribe</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getTitleObservable</span><span class="p">(</span><span class="n">String</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="na">create</span><span class="p">(</span><span class="n">subscriber</span> <span class="o">-&gt;</span> <span class="p">{</span>
          <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">subscriber</span><span class="p">.</span><span class="na">isUnsubscribed</span><span class="p">())</span> <span class="p">{</span>
<span class="hll">              <span class="k">try</span> <span class="p">{</span>
</span><span class="hll">                  <span class="n">subscriber</span><span class="p">.</span><span class="na">onNext</span><span class="p">(</span><span class="n">getTitle</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
</span><span class="hll">              <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">IllegalArgumentException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="hll">                  <span class="c1">//do nothing</span>
</span><span class="hll">              <span class="p">}</span>
</span><span class="hll">              <span class="n">subscriber</span><span class="p">.</span><span class="na">onCompleted</span><span class="p">();</span>
</span>          <span class="p">}</span>
      <span class="p">});</span>
  <span class="p">}</span>
</code></pre></div>
<p>Notice that we are calling <code>subscriber.onComplete()</code> for every name. Guess the output... guessed it? Now have a look<br>
Output :</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>onNext: John - 4
<a id="line-2" name="line-2"></a>onNext: Samuel - 6
<a id="line-3" name="line-3"></a>onNext: Tom - 3
<a id="line-4" name="line-4"></a>onCompleted
</code></pre></div>
<p>Is that what you expected? Probably not. Now have a look at what happens if don&#39;t call <code>subscriber.onComplete()</code> when there is an exception.</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span>  <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="na">create</span><span class="p">(</span><span class="n">subscriber</span> <span class="o">-&gt;</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">subscriber</span><span class="p">.</span><span class="na">isUnsubscribed</span><span class="p">())</span> <span class="p">{</span>
          <span class="k">try</span> <span class="p">{</span>
              <span class="n">subscriber</span><span class="p">.</span><span class="na">onNext</span><span class="p">(</span><span class="n">getTitle</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
<span class="hll">              <span class="n">subscriber</span><span class="p">.</span><span class="na">onCompleted</span><span class="p">();</span>
</span>          <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">IllegalArgumentException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
              <span class="c1">//do nothing</span>
          <span class="p">}</span>
      <span class="p">}</span>
  <span class="p">});</span>
</code></pre></div>
<p>Make a guess before you look at the output.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="line-1" name="line-1"></a>onNext: John - 4
<a id="line-2" name="line-2"></a>onNext: Samuel - 6
<a id="line-3" name="line-3"></a>onNext: Tom - 3
</code></pre></div>
<p>No <code>onComplete()</code> at all.<br>
Now make a guess who is the <code>subscriber</code> to our <code>getTitleObservable()</code> function.  </p>

<blockquote>
<p>The <code>flatMap()</code> operator is our subscriber  </p>
</blockquote>

<p>If you are thiking - &#39;Wait, <code>flatMap()</code> is an <em>Operator</em> not a <em>Subscriber</em>&#39;, you should watch <a href="https://vimeo.com/144812843">Demistifying RxJava Subscribers</a> by <a href="https://twitter.com/JakeWharton">Jake Wharton</a>. Basically, <strong>everything</strong> is a subscriber.</p>

<p><em>FlatMap</em> collects all the observables returned for each item in the stream and emits all the items emitted by those observables. Simply put, it is a <a href="https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Observable.java#L5204">merge of all observables returned by your mapping function</a>. 
It calls <code>onComplete()</code> only when all the observables are <em>completed</em>.  </p>

<p>In this example <code>getTitleObservale(&quot;Micheal&quot;)</code> wasn&#39;t completed. So <strong>FlatMap is waiting</strong> for it to complete(Yes, it is in the memory).</p>

<p>Visualise what happened in the above example. Now think about the <code>map()</code> operator. If you feel like - &#39;They are two very different operators&#39;, then I have done my job. If you don&#39;t, <a href="https://twitter.com/okmanideep">try confusing me as well</a>.</p>

<p>I am no expert in this topic. Just sharing as I learn. Please <a href="https://twitter.com/okmanideep">drop me a tweet</a> or a comment if I got anything wrong. And share it to people who you think will find this useful.</p>

<h3>EDIT</h3>

<p><a href="http://artemzin.com/blog/rxjava-defer-execution-of-function-via-fromcallable/">Artem Zinnatullin</a>&#39;s post suggests a better way to for our getTitleObservable().</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span><a id="line-1" name="line-1"></a><span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="na">fromCallable</span><span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">getTitle</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
</code></pre></div>
<p>By using this method, you don&#39;t need to worry about calling the right functions to the subscriber. Thanks to <a href="https://www.reddit.com/r/androiddev/comments/3u5w0c/if_you_are_writing_observablecreate_theres_a_big/">pakoito</a> for pointing that out.</p>]]></content><author><name>Manideep Polireddi</name></author><category term="okmanideep" /><category term="rxjava" /><category term="android" /><summary type="html"><![CDATA[You probably know what the map operator is. This post discussed mostly about FlatMap and that probably will remove the confusion between map and flatMap operators if any]]></summary></entry><entry><title type="html">Better code blocks in Jekyll</title><link href="https://okmanideep.github.io/better-code-blocks-in-jekyll" rel="alternate" type="text/html" title="Better code blocks in Jekyll" /><published>2015-11-24T01:40:00+05:30</published><updated>2015-11-24T01:40:00+05:30</updated><id>https://okmanideep.github.io/better-code-blocks-in-jekyll</id><content type="html" xml:base="https://okmanideep.github.io/better-code-blocks-in-jekyll"><![CDATA[<p>If you are blogging a lot of code, it makes a huge difference if you style your code blocks well. If you are using some Jekyll theme, chances are the default output is not so pleasing. If you are not much familiar with <code>Jekyll</code> or <code>Pygments</code>, trust me it would take a lot of time to get what you want by just searching the web. I have gathered  all the scattered suggestions I found and arranged them into this post. Let&#39;s make your code look better</p>

<h2>Setting up pygments</h2>

<p>In <code>_config.yml</code></p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><a id="line-1" name="line-1"></a><span class="ss">markdown</span><span class="p">:</span> <span class="n">redcarpet</span>
<a id="line-2" name="line-2"></a><span class="ss">redcarpet</span><span class="p">:</span>
<a id="line-3" name="line-3"></a>    <span class="ss">extension</span><span class="p">:</span>
<a id="line-4" name="line-4"></a>        <span class="o">-</span> <span class="n">fenced_code_blocks</span>
<a id="line-5" name="line-5"></a><span class="ss">highlighter</span><span class="p">:</span> <span class="n">pygments</span>
<a id="line-6" name="line-6"></a><span class="o">...</span>
<a id="line-7" name="line-7"></a><span class="o">...</span>
</code></pre></div>
<p>This sets <code>redcarpet</code> as our markdown parser and <code>pygments</code> as our code highlighter.<br>
And <code>fenced_code_blocks</code> extension enables you to write code blocks like in Github flavoured markdown using ```  </p>

<figure class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="True-1" name="True-1"></a>```css
<a id="True-2" name="True-2"></a>.left {float: left;}
<a id="True-3" name="True-3"></a>
<a id="True-4" name="True-4"></a>.right {float: right;}
<a id="True-5" name="True-5"></a>```</code></pre></figure>

<h2>Syntax highlighting</h2>

<p>By now your code probably looks like this</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text"><span></span>  .left {float: left;}
  
  .right {float: right;}</code></pre></figure>

<p>Just like plain text and no syntax highlighting based on the language you specified. But if you look at source you can see that <code>pygments</code> has analysed the code as css and added some classes to different parts of the code. All we need to do is add some css to those classes.</p>

<p>I have written a <a href="https://gist.github.com/okmanideep/aa0890c6da9104e16a7a">github like color scheme</a>. You can find other styles online for <a href="https://www.google.co.in/search?q=pygments+syntax+highlighting+css">pygments syntax highlighting css</a>.</p>

<p>After adding the sytax highlighting css your code should look like this</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span></span>  <span class="p">.</span><span class="nc">left</span> <span class="p">{</span><span class="k">float</span><span class="p">:</span> <span class="kc">left</span><span class="p">;}</span>
  
  <span class="p">.</span><span class="nc">right</span> <span class="p">{</span><span class="k">float</span><span class="p">:</span> <span class="kc">right</span><span class="p">;}</span></code></pre></figure>

<h2>Line Numbers</h2>

<p>As mentioned by <a href="https://drewsilcock.co.uk/proper-linenumbers/">Drew Silcock</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters">CSS Counters</a> is the best way to add line numbers to your code blocks. Add css counters to your <code>pre</code> blocks using <a href="https://gist.github.com/okmanideep/55419a959b7fd39a1c89">jekyll-pygments-line-numbers.css</a>.</p>

<p>To use this technique we should tell pygments to generate <code>lineanchors</code> for the code blocks. We can do this by using liquid template tags for our code blocks</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text"><span></span><a id="True-1" name="True-1"></a>{% highlight css %}
<a id="True-2" name="True-2"></a>.left {float: left;}
<a id="True-3" name="True-3"></a>
<a id="True-4" name="True-4"></a>.right {float: right;}
<a id="True-5" name="True-5"></a>{% endhighlight %}</code></pre></figure>

<p>But we want to write our code block using ```<code>css</code>. We can do this by adding a custom redcarpet parser. Add this <code>redcarpet-custom.rb</code> file to your <code>_plugins</code> folder</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><a id="line-1" name="line-1"></a><span class="k">module</span> <span class="nn">Jekyll</span>
<a id="line-2" name="line-2"></a>  <span class="k">module</span> <span class="nn">Converters</span>
<a id="line-3" name="line-3"></a>    <span class="k">class</span> <span class="nc">Markdown</span>
<a id="line-4" name="line-4"></a>      <span class="k">class</span> <span class="nc">RedcarpetParser</span>
<a id="line-5" name="line-5"></a>        <span class="k">module</span> <span class="nn">WithPygments</span>
<a id="line-6" name="line-6"></a>          <span class="kp">include</span> <span class="no">CommonMethods</span>
<a id="line-7" name="line-7"></a>          <span class="k">def</span> <span class="nf">block_code</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>
<a id="line-8" name="line-8"></a>            <span class="nb">require</span> <span class="s1">&#39;pygments&#39;</span>
<a id="line-9" name="line-9"></a>            <span class="n">lang</span> <span class="o">=</span> <span class="n">lang</span> <span class="o">&amp;&amp;</span> <span class="n">lang</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="s2">&quot;text&quot;</span>
<a id="line-10" name="line-10"></a>            <span class="n">output</span> <span class="o">=</span> <span class="n">add_code_tags</span><span class="p">(</span>
<a id="line-11" name="line-11"></a>              <span class="no">Pygments</span><span class="o">.</span><span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="ss">:lexer</span> <span class="o">=&gt;</span> <span class="n">lang</span><span class="p">,</span>
<a id="line-12" name="line-12"></a>                                 <span class="ss">:options</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="ss">:lineanchors</span> <span class="o">=&gt;</span><span class="s1">&#39;line&#39;</span> <span class="p">}),</span>
<a id="line-13" name="line-13"></a>              <span class="n">lang</span>
<a id="line-14" name="line-14"></a>            <span class="p">)</span>
<a id="line-15" name="line-15"></a>          <span class="k">end</span>
<a id="line-16" name="line-16"></a>        <span class="k">end</span>
<a id="line-17" name="line-17"></a>      <span class="k">end</span>
<a id="line-18" name="line-18"></a>    <span class="k">end</span>
<a id="line-19" name="line-19"></a>  <span class="k">end</span>
<a id="line-20" name="line-20"></a><span class="k">end</span>
</code></pre></div>
<p>You can add as many <a href="http://pygments.org/docs/formatters/">Pygment options</a> to the <code>:options =&gt; { ... }</code> hash. The above ovverrides the <a href="https://github.com/jekyll/jekyll/blob/master/lib/jekyll/converters/markdown/redcarpet_parser.rb">WithPygments module</a> of the redcarpet parser.</p>

<p>After this your code blocks should look like</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span></span><a id="line-1" name="line-1"></a><span class="p">.</span><span class="nc">left</span> <span class="p">{</span><span class="k">float</span><span class="p">:</span> <span class="kc">left</span><span class="p">;}</span>
<a id="line-2" name="line-2"></a>
<a id="line-3" name="line-3"></a><span class="p">.</span><span class="nc">right</span> <span class="p">{</span><span class="k">float</span><span class="p">:</span> <span class="kc">right</span><span class="p">;}</span>
</code></pre></div>
<h2>Line highlighting</h2>

<p>...</p>]]></content><author><name>Manideep Polireddi</name></author><category term="okmanideep" /><category term="jekyll" /><category term="gh-pages" /><summary type="html"><![CDATA[Your code can look a lot better in your blog powered by Jekyll if you do these simple things. Add line numbers, line highlights in your plain github flavored markdown in all your blog posts.]]></summary></entry><entry><title type="html">Clean way to define support library dependencies</title><link href="https://okmanideep.github.io/clean-way-to-define-support-library-dependencies" rel="alternate" type="text/html" title="Clean way to define support library dependencies" /><published>2015-11-24T01:40:00+05:30</published><updated>2015-11-24T01:40:00+05:30</updated><id>https://okmanideep.github.io/clean-way-to-define-support-library-dependencies</id><content type="html" xml:base="https://okmanideep.github.io/clean-way-to-define-support-library-dependencies"><![CDATA[<p>As the support library started getting bigger with more tools in it, the team at google have suggested developers to pick and choose the individual pieces of the library in their dependencies. More recently our <code>build.gradle</code> files started to look like this</p>
<div class="highlight"><pre><code class="language-groovy" data-lang="groovy"><span></span><a id="line-1" name="line-1"></a><span class="n">dependencies</span> <span class="o">{</span>
<a id="line-2" name="line-2"></a>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:appcompat-v7:23.1.0&#39;</span>
<a id="line-3" name="line-3"></a>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:design:23.1.0&#39;</span>
<a id="line-4" name="line-4"></a>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:pallete-v7:23.1.0&#39;</span>
<a id="line-5" name="line-5"></a>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:cardview-v7:23.1.0&#39;</span>
<a id="line-6" name="line-6"></a>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:recyclerview-v7:23.1.0&#39;</span>
<a id="line-7" name="line-7"></a><span class="o">}</span>
</code></pre></div>
<p>So when a new release comes out, we have to change the version number in every single line. Chris Banes, from the Android developer relations team, in <a href="https://www.youtube.com/watch?v=ihQ16K8gSuQ&t=17m58s">Android Dev Summit 2015</a> has given this great tip to solve this problem.</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">This! <a href="https://twitter.com/hashtag/AndroidDev?src=hash">#AndroidDev</a> <a href="https://twitter.com/hashtag/AndroidDevSummit?src=hash">#AndroidDevSummit</a>&#10;🙏 <a href="https://twitter.com/chrisbanes">@chrisbanes</a> <a href="https://t.co/v47Pm74ohj">pic.twitter.com/v47Pm74ohj</a></p>&mdash; Manideep Polireddi (@okmanideep) <a href="https://twitter.com/okmanideep/status/669195097947377664">November 24, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Great! But there is a small <strong>catch</strong> here  </p>

<p><code>compile &#39;com.android.support:appcompat-v7:${supportLibVersion}&#39;</code> <strong>doesn&#39;t work</strong><br>
<code>compile &quot;com.android.support:appcompat-v7:${supportLibVersion}&quot;</code> <strong>WORKS!!!</strong>  </p>

<p>If you haven&#39;t noticed yet, you should use <strong>double quotes</strong></p>

<p>So the final code looks like this</p>
<div class="highlight"><pre><code class="language-groovy" data-lang="groovy"><span></span><a id="line-1" name="line-1"></a><span class="n">ext</span> <span class="o">{</span>
<a id="line-2" name="line-2"></a>    <span class="n">supportLibVersion</span> <span class="o">=</span> <span class="s1">&#39;23.1.1&#39;</span>
<a id="line-3" name="line-3"></a><span class="o">}</span>
<a id="line-4" name="line-4"></a>
<a id="line-5" name="line-5"></a><span class="n">dependencies</span> <span class="o">{</span>
<a id="line-6" name="line-6"></a>    <span class="n">compile</span> <span class="s2">&quot;com.android.support:appcompat-v7:${supportLibVersion}&quot;</span>
<a id="line-7" name="line-7"></a>    <span class="n">compile</span> <span class="s2">&quot;com.android.support:design:${supportLibVersion}&quot;</span>
<a id="line-8" name="line-8"></a>    <span class="n">compile</span> <span class="s2">&quot;com.android.support:pallete-v7:${supportLibVersion}&quot;</span>
<a id="line-9" name="line-9"></a>    <span class="n">compile</span> <span class="s2">&quot;com.android.support:cardview-v7:${supportLibVersion}&quot;</span>
<a id="line-10" name="line-10"></a>    <span class="n">compile</span> <span class="s2">&quot;com.android.support:recyclerview-v7:${supportLibVersion}&quot;</span>
<a id="line-11" name="line-11"></a><span class="o">}</span>
</code></pre></div>
<p>By the way, Android Studio is intelligent enough that it will suggest you to update the version when there is a new one out, even in the above format. All hail IntelliJ.</p>]]></content><author><name>Manideep Polireddi</name></author><category term="okmanideep" /><category term="android" /><summary type="html"><![CDATA[A cleaner way to define support library dependencies which makes updating their version number a whole lot easier]]></summary></entry><entry><title type="html">Permissions in marshmallow</title><link href="https://okmanideep.github.io/permissions-in-marshmallow" rel="alternate" type="text/html" title="Permissions in marshmallow" /><published>2015-11-15T01:40:00+05:30</published><updated>2015-11-15T01:40:00+05:30</updated><id>https://okmanideep.github.io/permissions-in-marshmallow</id><content type="html" xml:base="https://okmanideep.github.io/permissions-in-marshmallow"><![CDATA[<p>I expect you to first go and have a look at this page in the <a href="http://developer.android.com/training/permissions/requesting.html">Android Bible</a> about permissions in marshmallow. Especially have a look at how to:</p>

<ul>
<li>Request the permissions you need</li>
<li>Handle the permissions request response</li>
</ul>

<h4>Requesting for permission</h4>

<p>You might have seen a code snippet like below in the training page.</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span><a id="line-1" name="line-1"></a><span class="c1">// Here, thisActivity is the current activity</span>
<a id="line-2" name="line-2"></a><span class="k">if</span> <span class="p">(</span><span class="n">ContextCompat</span><span class="p">.</span><span class="na">checkSelfPermission</span><span class="p">(</span><span class="n">thisActivity</span><span class="p">,</span>
<a id="line-3" name="line-3"></a>                <span class="n">Manifest</span><span class="p">.</span><span class="na">permission</span><span class="p">.</span><span class="na">READ_CONTACTS</span><span class="p">)</span>
<a id="line-4" name="line-4"></a>        <span class="o">!=</span> <span class="n">PackageManager</span><span class="p">.</span><span class="na">PERMISSION_GRANTED</span><span class="p">)</span> <span class="p">{</span>
<a id="line-5" name="line-5"></a>    <span class="c1">// Should we show an explanation?</span>
<a id="line-6" name="line-6"></a>    <span class="k">if</span> <span class="p">(</span><span class="n">ActivityCompat</span><span class="p">.</span><span class="na">shouldShowRequestPermissionRationale</span><span class="p">(</span><span class="n">thisActivity</span><span class="p">,</span>
<a id="line-7" name="line-7"></a>            <span class="n">Manifest</span><span class="p">.</span><span class="na">permission</span><span class="p">.</span><span class="na">READ_CONTACTS</span><span class="p">))</span> <span class="p">{</span>
<a id="line-8" name="line-8"></a>        <span class="c1">//show user the reason for permission</span>
<a id="line-9" name="line-9"></a>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<a id="line-10" name="line-10"></a>        <span class="c1">//request permission</span>
<a id="line-11" name="line-11"></a>    <span class="p">}</span>
<a id="line-12" name="line-12"></a><span class="p">}</span>
</code></pre></div>
<h3>Pay Attention</h3>

<p>Lets just dive into the only tricky part here - <code>shouldShowRequestPermissionRationale()</code> returns</p>

<ul>
<li><strong>true</strong> if 

<ul>
<li>The app has requested this permission previously and the user denied the request <strong>in the dialog</strong></li>
<li>User has toggled off the permission <strong>in the settings</strong> (<em>Even if the app hasn&#39;t requested the permission yet, if the user just has toggled the switch on and off in the settings page, you are expected to show the rationale</em>)</li>
</ul></li>
<li><strong>false</strong> if

<ul>
<li>The app didn&#39;t request for this permission yet</li>
<li>The user denied the permission and chose <strong>Don&#39;t ask again</strong> option</li>
<li>The device policy prohibits the app from having that permission (<em>Mostly in enterprise cenarios</em>)</li>
</ul></li>
</ul>

<h3>Consider this possible case</h3>

<p>The above code works pretty much in most practical cases. Let us consider this case:</p>

<ul>
<li>The user has chosen <strong>Don&#39;t ask again</strong> for contacts access in the past (<em>which will most probably never happen if you have requested permissions gracefully and if the user made the decision conciously</em>) </li>
<li>And now the user wants to send a contact to his friend </li>
</ul>

<p>There is no way to detect using the above code that we were denied the permission, and ask him to grant the permission via application settings.</p>

<h3>The way out</h3>

<p>Check for <code>shouldShowRequestPermissionRationale()</code> before and after asking permission. If it returns false both the times then the user chose &#39;Don&#39;t ask again&#39; in the past or the device policy doesn&#39;t allow for that permission.</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span>  <span class="kt">boolean</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">;</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">requestContactsPermission</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">ContextCompat</span><span class="p">.</span><span class="na">checkSelfPermission</span><span class="p">(</span><span class="n">thisActivity</span><span class="p">,</span>
                      <span class="n">Manifest</span><span class="p">.</span><span class="na">permission</span><span class="p">.</span><span class="na">READ_CONTACTS</span><span class="p">)</span>
              <span class="o">!=</span> <span class="n">PackageManager</span><span class="p">.</span><span class="na">PERMISSION_GRANTED</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// Should we show an explanation?</span>
<span class="hll">          <span class="n">before</span> <span class="o">=</span> <span class="n">ActivityCompat</span><span class="p">.</span><span class="na">shouldShowRequestPermissionRationale</span><span class="p">(</span><span class="n">thisActivity</span><span class="p">,</span>
</span><span class="hll">                  <span class="n">Manifest</span><span class="p">.</span><span class="na">permission</span><span class="p">.</span><span class="na">READ_CONTACTS</span><span class="p">);</span>
</span><span class="hll">          <span class="k">if</span> <span class="p">(</span><span class="n">before</span><span class="p">)</span> <span class="p">{</span>
</span>              <span class="c1">//show user the reason for permission</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
              <span class="c1">//request permission</span>
          <span class="p">}</span>
      <span class="p">}</span>
  <span class="p">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRequestPermissionsResult</span><span class="p">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="p">,</span>
          <span class="n">String</span> <span class="n">permissions</span><span class="o">[]</span><span class="p">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">grantResults</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">switch</span> <span class="p">(</span><span class="n">requestCode</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">case</span> <span class="n">MY_PERMISSIONS_REQUEST_READ_CONTACTS</span><span class="p">:</span> <span class="p">{</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">grantResults</span><span class="p">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
                  <span class="o">&amp;&amp;</span> <span class="n">grantResults</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">PackageManager</span><span class="p">.</span><span class="na">PERMISSION_GRANTED</span><span class="p">)</span> <span class="p">{</span>
                  <span class="c1">// permission was granted, yay! Do the</span>
                  <span class="c1">// contacts-related task you need to do.</span>
              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="hll">                  <span class="n">after</span> <span class="o">=</span> <span class="n">ActivityCompat</span><span class="p">.</span><span class="na">shouldShowRequestPermissionRationale</span><span class="p">(</span>
</span><span class="hll">                  <span class="n">thisActivity</span><span class="p">,</span>
</span><span class="hll">                  <span class="n">Manifest</span><span class="p">.</span><span class="na">permission</span><span class="p">.</span><span class="na">READ_CONTACTS</span><span class="p">);</span>
</span><span class="hll">                  <span class="kt">boolean</span> <span class="n">goToSettings</span> <span class="o">=</span> <span class="o">!</span><span class="p">(</span><span class="n">after</span> <span class="o">||</span> <span class="n">before</span><span class="p">);</span>
</span><span class="hll">                  <span class="n">showRationale</span><span class="p">(</span><span class="n">goToSettings</span><span class="p">);</span>
</span>              <span class="p">}</span>
              <span class="k">return</span><span class="p">;</span>
          <span class="p">}</span>
      <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>
<p>If both <code>before</code> and <code>after</code> are <code>false</code>, then show the user a dialog explaining that we need the contacts permission with a &#39;GO TO SETTINGS&#39; button. On click take him to your application in the settings like this :</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span></span><a id="line-1" name="line-1"></a><span class="kd">private</span> <span class="kt">void</span> <span class="nf">goToSettings</span><span class="p">()</span> <span class="p">{</span>
<a id="line-2" name="line-2"></a>    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="p">();</span>
<a id="line-3" name="line-3"></a>    <span class="n">intent</span><span class="p">.</span><span class="na">setAction</span><span class="p">(</span><span class="n">Settings</span><span class="p">.</span><span class="na">ACTION_APPLICATION_DETAILS_SETTINGS</span><span class="p">);</span>
<a id="line-4" name="line-4"></a>    <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="p">.</span><span class="na">parse</span><span class="p">(</span><span class="s">&quot;package:&quot;</span> <span class="o">+</span> <span class="n">getPackageName</span><span class="p">());</span>
<a id="line-5" name="line-5"></a>    <span class="n">intent</span><span class="p">.</span><span class="na">setData</span><span class="p">(</span><span class="n">uri</span><span class="p">);</span>
<a id="line-6" name="line-6"></a>    <span class="n">startActivity</span><span class="p">(</span><span class="n">intent</span><span class="p">);</span>
<a id="line-7" name="line-7"></a><span class="p">}</span>
</code></pre></div>]]></content><author><name>Manideep Polireddi</name></author><category term="okmanideep" /><category term="android" /><summary type="html"><![CDATA[A deep dive into requesting permissions in Android Marshmallow and handling extreme cases]]></summary></entry></feed>